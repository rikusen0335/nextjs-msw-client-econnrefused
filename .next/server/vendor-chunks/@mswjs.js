"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mswjs";
exports.ids = ["vendor-chunks/@mswjs"];
exports.modules = {

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/browser/chunk-QED3Q6Z2.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/browser/chunk-QED3Q6Z2.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNAL_REQUEST_ID_HEADER_NAME: () => (/* binding */ INTERNAL_REQUEST_ID_HEADER_NAME),\n/* harmony export */   Interceptor: () => (/* binding */ Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* binding */ InterceptorReadyState),\n/* harmony export */   createRequestId: () => (/* binding */ createRequestId),\n/* harmony export */   deleteGlobalSymbol: () => (/* binding */ deleteGlobalSymbol),\n/* harmony export */   getGlobalSymbol: () => (/* binding */ getGlobalSymbol)\n/* harmony export */ });\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @open-draft/logger */ \"(rsc)/./node_modules/@open-draft/logger/lib/index.mjs\");\n/* harmony import */ var strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strict-event-emitter */ \"(rsc)/./node_modules/strict-event-emitter/lib/index.mjs\");\n// src/Interceptor.ts\n\n\nvar INTERNAL_REQUEST_ID_HEADER_NAME = \"x-interceptors-internal-request-id\";\nfunction getGlobalSymbol(symbol) {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || void 0\n  );\n}\nfunction setGlobalSymbol(symbol, value) {\n  globalThis[symbol] = value;\n}\nfunction deleteGlobalSymbol(symbol) {\n  delete globalThis[symbol];\n}\nvar InterceptorReadyState = /* @__PURE__ */ ((InterceptorReadyState2) => {\n  InterceptorReadyState2[\"INACTIVE\"] = \"INACTIVE\";\n  InterceptorReadyState2[\"APPLYING\"] = \"APPLYING\";\n  InterceptorReadyState2[\"APPLIED\"] = \"APPLIED\";\n  InterceptorReadyState2[\"DISPOSING\"] = \"DISPOSING\";\n  InterceptorReadyState2[\"DISPOSED\"] = \"DISPOSED\";\n  return InterceptorReadyState2;\n})(InterceptorReadyState || {});\nvar Interceptor = class {\n  constructor(symbol) {\n    this.symbol = symbol;\n    this.readyState = \"INACTIVE\" /* INACTIVE */;\n    this.emitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n    this.subscriptions = [];\n    this.logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(symbol.description);\n    this.emitter.setMaxListeners(0);\n    this.logger.info(\"constructing the interceptor...\");\n  }\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  checkEnvironment() {\n    return true;\n  }\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  apply() {\n    const logger = this.logger.extend(\"apply\");\n    logger.info(\"applying the interceptor...\");\n    if (this.readyState === \"APPLIED\" /* APPLIED */) {\n      logger.info(\"intercepted already applied!\");\n      return;\n    }\n    const shouldApply = this.checkEnvironment();\n    if (!shouldApply) {\n      logger.info(\"the interceptor cannot be applied in this environment!\");\n      return;\n    }\n    this.readyState = \"APPLYING\" /* APPLYING */;\n    const runningInstance = this.getInstance();\n    if (runningInstance) {\n      logger.info(\"found a running instance, reusing...\");\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event);\n        runningInstance.emitter.addListener(event, listener);\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener);\n          logger.info('removed proxied \"%s\" listener!', event);\n        });\n        return this;\n      };\n      this.readyState = \"APPLIED\" /* APPLIED */;\n      return;\n    }\n    logger.info(\"no running instance found, setting up a new instance...\");\n    this.setup();\n    this.setInstance();\n    this.readyState = \"APPLIED\" /* APPLIED */;\n  }\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  setup() {\n  }\n  /**\n   * Listen to the interceptor's public events.\n   */\n  on(event, listener) {\n    const logger = this.logger.extend(\"on\");\n    if (this.readyState === \"DISPOSING\" /* DISPOSING */ || this.readyState === \"DISPOSED\" /* DISPOSED */) {\n      logger.info(\"cannot listen to events, already disposed!\");\n      return this;\n    }\n    logger.info('adding \"%s\" event listener:', event, listener);\n    this.emitter.on(event, listener);\n    return this;\n  }\n  once(event, listener) {\n    this.emitter.once(event, listener);\n    return this;\n  }\n  off(event, listener) {\n    this.emitter.off(event, listener);\n    return this;\n  }\n  removeAllListeners(event) {\n    this.emitter.removeAllListeners(event);\n    return this;\n  }\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  dispose() {\n    const logger = this.logger.extend(\"dispose\");\n    if (this.readyState === \"DISPOSED\" /* DISPOSED */) {\n      logger.info(\"cannot dispose, already disposed!\");\n      return;\n    }\n    logger.info(\"disposing the interceptor...\");\n    this.readyState = \"DISPOSING\" /* DISPOSING */;\n    if (!this.getInstance()) {\n      logger.info(\"no interceptors running, skipping dispose...\");\n      return;\n    }\n    this.clearInstance();\n    logger.info(\"global symbol deleted:\", getGlobalSymbol(this.symbol));\n    if (this.subscriptions.length > 0) {\n      logger.info(\"disposing of %d subscriptions...\", this.subscriptions.length);\n      for (const dispose of this.subscriptions) {\n        dispose();\n      }\n      this.subscriptions = [];\n      logger.info(\"disposed of all subscriptions!\", this.subscriptions.length);\n    }\n    this.emitter.removeAllListeners();\n    logger.info(\"destroyed the listener!\");\n    this.readyState = \"DISPOSED\" /* DISPOSED */;\n  }\n  getInstance() {\n    var _a;\n    const instance = getGlobalSymbol(this.symbol);\n    this.logger.info(\"retrieved global instance:\", (_a = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a.name);\n    return instance;\n  }\n  setInstance() {\n    setGlobalSymbol(this.symbol, this);\n    this.logger.info(\"set global instance!\", this.symbol.description);\n  }\n  clearInstance() {\n    deleteGlobalSymbol(this.symbol);\n    this.logger.info(\"cleared global instance!\", this.symbol.description);\n  }\n};\n\n// src/createRequestId.ts\nfunction createRequestId() {\n  return Math.random().toString(16).slice(2);\n}\n\n\n//# sourceMappingURL=chunk-QED3Q6Z2.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/browser/chunk-QED3Q6Z2.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/browser/chunk-TX5GBTFY.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/browser/chunk-TX5GBTFY.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasConfigurableGlobal: () => (/* binding */ hasConfigurableGlobal)\n/* harmony export */ });\n// src/utils/hasConfigurableGlobal.ts\nfunction hasConfigurableGlobal(propertyName) {\n  const descriptor = Object.getOwnPropertyDescriptor(globalThis, propertyName);\n  if (typeof descriptor === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"function\" && typeof descriptor.get() === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"undefined\" && descriptor.value == null) {\n    return false;\n  }\n  if (typeof descriptor.set === \"undefined\" && !descriptor.configurable) {\n    console.error(\n      `[MSW] Failed to apply interceptor: the global \\`${propertyName}\\` property is non-configurable. This is likely an issue with your environment. If you are using a framework, please open an issue about this in their repository.`\n    );\n    return false;\n  }\n  return true;\n}\n\n\n//# sourceMappingURL=chunk-TX5GBTFY.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvYnJvd3Nlci9jaHVuay1UWDVHQlRGWS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsYUFBYTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9icm93c2VyL2NodW5rLVRYNUdCVEZZLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvaGFzQ29uZmlndXJhYmxlR2xvYmFsLnRzXG5mdW5jdGlvbiBoYXNDb25maWd1cmFibGVHbG9iYWwocHJvcGVydHlOYW1lKSB7XG4gIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbFRoaXMsIHByb3BlcnR5TmFtZSk7XG4gIGlmICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlc2NyaXB0b3IuZ2V0KCkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gXCJ1bmRlZmluZWRcIiAmJiBkZXNjcmlwdG9yLnZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnNldCA9PT0gXCJ1bmRlZmluZWRcIiAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYFtNU1ddIEZhaWxlZCB0byBhcHBseSBpbnRlcmNlcHRvcjogdGhlIGdsb2JhbCBcXGAke3Byb3BlcnR5TmFtZX1cXGAgcHJvcGVydHkgaXMgbm9uLWNvbmZpZ3VyYWJsZS4gVGhpcyBpcyBsaWtlbHkgYW4gaXNzdWUgd2l0aCB5b3VyIGVudmlyb25tZW50LiBJZiB5b3UgYXJlIHVzaW5nIGEgZnJhbWV3b3JrLCBwbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhYm91dCB0aGlzIGluIHRoZWlyIHJlcG9zaXRvcnkuYFxuICAgICk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQge1xuICBoYXNDb25maWd1cmFibGVHbG9iYWxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1UWDVHQlRGWS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/browser/chunk-TX5GBTFY.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/browser/interceptors/WebSocket/index.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/browser/interceptors/WebSocket/index.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketClientConnection: () => (/* binding */ WebSocketClientConnection),\n/* harmony export */   WebSocketInterceptor: () => (/* binding */ WebSocketInterceptor),\n/* harmony export */   WebSocketServerConnection: () => (/* binding */ WebSocketServerConnection)\n/* harmony export */ });\n/* harmony import */ var _chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-TX5GBTFY.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/browser/chunk-TX5GBTFY.mjs\");\n/* harmony import */ var _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-QED3Q6Z2.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/browser/chunk-QED3Q6Z2.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(rsc)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n\n\n\n// src/interceptors/WebSocket/utils/bindEvent.ts\nfunction bindEvent(target, event) {\n  Object.defineProperties(event, {\n    target: {\n      value: target,\n      enumerable: true,\n      writable: true\n    },\n    currentTarget: {\n      value: target,\n      enumerable: true,\n      writable: true\n    }\n  });\n  return event;\n}\n\n// src/interceptors/WebSocket/utils/events.ts\nvar kCancelable = Symbol(\"kCancelable\");\nvar kDefaultPrevented = Symbol(\"kDefaultPrevented\");\nvar CancelableMessageEvent = class extends MessageEvent {\n  constructor(type, init) {\n    super(type, init);\n    this[kCancelable] = !!init.cancelable;\n    this[kDefaultPrevented] = false;\n  }\n  get cancelable() {\n    return this[kCancelable];\n  }\n  set cancelable(nextCancelable) {\n    this[kCancelable] = nextCancelable;\n  }\n  get defaultPrevented() {\n    return this[kDefaultPrevented];\n  }\n  set defaultPrevented(nextDefaultPrevented) {\n    this[kDefaultPrevented] = nextDefaultPrevented;\n  }\n  preventDefault() {\n    if (this.cancelable && !this[kDefaultPrevented]) {\n      this[kDefaultPrevented] = true;\n    }\n  }\n};\nkCancelable, kDefaultPrevented;\nvar CloseEvent = class extends Event {\n  constructor(type, init = {}) {\n    super(type, init);\n    this.code = init.code === void 0 ? 0 : init.code;\n    this.reason = init.reason === void 0 ? \"\" : init.reason;\n    this.wasClean = init.wasClean === void 0 ? false : init.wasClean;\n  }\n};\nvar CancelableCloseEvent = class extends CloseEvent {\n  constructor(type, init = {}) {\n    super(type, init);\n    this[kCancelable] = !!init.cancelable;\n    this[kDefaultPrevented] = false;\n  }\n  get cancelable() {\n    return this[kCancelable];\n  }\n  set cancelable(nextCancelable) {\n    this[kCancelable] = nextCancelable;\n  }\n  get defaultPrevented() {\n    return this[kDefaultPrevented];\n  }\n  set defaultPrevented(nextDefaultPrevented) {\n    this[kDefaultPrevented] = nextDefaultPrevented;\n  }\n  preventDefault() {\n    if (this.cancelable && !this[kDefaultPrevented]) {\n      this[kDefaultPrevented] = true;\n    }\n  }\n};\nkCancelable, kDefaultPrevented;\n\n// src/interceptors/WebSocket/WebSocketClientConnection.ts\nvar kEmitter = Symbol(\"kEmitter\");\nvar kBoundListener = Symbol(\"kBoundListener\");\nvar WebSocketClientConnection = class {\n  constructor(socket, transport) {\n    this.socket = socket;\n    this.transport = transport;\n    this.id = (0,_chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_1__.createRequestId)();\n    this.url = new URL(socket.url);\n    this[kEmitter] = new EventTarget();\n    this.transport.addEventListener(\"outgoing\", (event) => {\n      const message = bindEvent(\n        this.socket,\n        new CancelableMessageEvent(\"message\", {\n          data: event.data,\n          origin: event.origin,\n          cancelable: true\n        })\n      );\n      this[kEmitter].dispatchEvent(message);\n      if (message.defaultPrevented) {\n        event.preventDefault();\n      }\n    });\n    this.transport.addEventListener(\"close\", (event) => {\n      this[kEmitter].dispatchEvent(\n        bindEvent(this.socket, new CloseEvent(\"close\", event))\n      );\n    });\n  }\n  /**\n   * Listen for the outgoing events from the connected WebSocket client.\n   */\n  addEventListener(type, listener, options) {\n    if (!Reflect.has(listener, kBoundListener)) {\n      const boundListener = listener.bind(this.socket);\n      Object.defineProperty(listener, kBoundListener, {\n        value: boundListener,\n        enumerable: false,\n        configurable: false\n      });\n    }\n    this[kEmitter].addEventListener(\n      type,\n      Reflect.get(listener, kBoundListener),\n      options\n    );\n  }\n  /**\n   * Removes the listener for the given event.\n   */\n  removeEventListener(event, listener, options) {\n    this[kEmitter].removeEventListener(\n      event,\n      Reflect.get(listener, kBoundListener),\n      options\n    );\n  }\n  /**\n   * Send data to the connected client.\n   */\n  send(data) {\n    this.transport.send(data);\n  }\n  /**\n   * Close the WebSocket connection.\n   * @param {number} code A status code (see https://www.rfc-editor.org/rfc/rfc6455#section-7.4.1).\n   * @param {string} reason A custom connection close reason.\n   */\n  close(code, reason) {\n    this.transport.close(code, reason);\n  }\n};\nkEmitter;\n\n// src/interceptors/WebSocket/WebSocketServerConnection.ts\n\n\n// src/interceptors/WebSocket/WebSocketOverride.ts\n\n\nvar WEBSOCKET_CLOSE_CODE_RANGE_ERROR = \"InvalidAccessError: close code out of user configurable range\";\nvar kPassthroughPromise = Symbol(\"kPassthroughPromise\");\nvar kOnSend = Symbol(\"kOnSend\");\nvar kClose = Symbol(\"kClose\");\nvar WebSocketOverride = class extends EventTarget {\n  constructor(url, protocols) {\n    super();\n    this.CONNECTING = 0;\n    this.OPEN = 1;\n    this.CLOSING = 2;\n    this.CLOSED = 3;\n    this._onopen = null;\n    this._onmessage = null;\n    this._onerror = null;\n    this._onclose = null;\n    this.url = url.toString();\n    this.protocol = \"\";\n    this.extensions = \"\";\n    this.binaryType = \"blob\";\n    this.readyState = this.CONNECTING;\n    this.bufferedAmount = 0;\n    this[kPassthroughPromise] = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_3__.DeferredPromise();\n    queueMicrotask(async () => {\n      if (await this[kPassthroughPromise]) {\n        return;\n      }\n      this.protocol = typeof protocols === \"string\" ? protocols : Array.isArray(protocols) && protocols.length > 0 ? protocols[0] : \"\";\n      if (this.readyState === this.CONNECTING) {\n        this.readyState = this.OPEN;\n        this.dispatchEvent(bindEvent(this, new Event(\"open\")));\n      }\n    });\n  }\n  set onopen(listener) {\n    this.removeEventListener(\"open\", this._onopen);\n    this._onopen = listener;\n    if (listener !== null) {\n      this.addEventListener(\"open\", listener);\n    }\n  }\n  get onopen() {\n    return this._onopen;\n  }\n  set onmessage(listener) {\n    this.removeEventListener(\n      \"message\",\n      this._onmessage\n    );\n    this._onmessage = listener;\n    if (listener !== null) {\n      this.addEventListener(\"message\", listener);\n    }\n  }\n  get onmessage() {\n    return this._onmessage;\n  }\n  set onerror(listener) {\n    this.removeEventListener(\"error\", this._onerror);\n    this._onerror = listener;\n    if (listener !== null) {\n      this.addEventListener(\"error\", listener);\n    }\n  }\n  get onerror() {\n    return this._onerror;\n  }\n  set onclose(listener) {\n    this.removeEventListener(\"close\", this._onclose);\n    this._onclose = listener;\n    if (listener !== null) {\n      this.addEventListener(\"close\", listener);\n    }\n  }\n  get onclose() {\n    return this._onclose;\n  }\n  /**\n   * @see https://websockets.spec.whatwg.org/#ref-for-dom-websocket-send%E2%91%A0\n   */\n  send(data) {\n    if (this.readyState === this.CONNECTING) {\n      this.close();\n      throw new DOMException(\"InvalidStateError\");\n    }\n    if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {\n      return;\n    }\n    this.bufferedAmount += getDataSize(data);\n    queueMicrotask(() => {\n      var _a;\n      this.bufferedAmount = 0;\n      (_a = this[kOnSend]) == null ? void 0 : _a.call(this, data);\n    });\n  }\n  close(code = 1e3, reason) {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(code, WEBSOCKET_CLOSE_CODE_RANGE_ERROR);\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n      code === 1e3 || code >= 3e3 && code <= 4999,\n      WEBSOCKET_CLOSE_CODE_RANGE_ERROR\n    );\n    this[kClose](code, reason);\n  }\n  [(kPassthroughPromise, kOnSend, kClose)](code = 1e3, reason, wasClean = true) {\n    if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {\n      return;\n    }\n    this.readyState = this.CLOSING;\n    queueMicrotask(() => {\n      this.readyState = this.CLOSED;\n      this.dispatchEvent(\n        bindEvent(\n          this,\n          new CloseEvent(\"close\", {\n            code,\n            reason,\n            wasClean\n          })\n        )\n      );\n      this._onopen = null;\n      this._onmessage = null;\n      this._onerror = null;\n      this._onclose = null;\n    });\n  }\n  addEventListener(type, listener, options) {\n    return super.addEventListener(\n      type,\n      listener,\n      options\n    );\n  }\n  removeEventListener(type, callback, options) {\n    return super.removeEventListener(type, callback, options);\n  }\n};\nWebSocketOverride.CONNECTING = 0;\nWebSocketOverride.OPEN = 1;\nWebSocketOverride.CLOSING = 2;\nWebSocketOverride.CLOSED = 3;\nfunction getDataSize(data) {\n  if (typeof data === \"string\") {\n    return data.length;\n  }\n  if (data instanceof Blob) {\n    return data.size;\n  }\n  return data.byteLength;\n}\n\n// src/interceptors/WebSocket/WebSocketServerConnection.ts\nvar kEmitter2 = Symbol(\"kEmitter\");\nvar kBoundListener2 = Symbol(\"kBoundListener\");\nvar kSend = Symbol(\"kSend\");\nvar WebSocketServerConnection = class {\n  constructor(client, transport, createConnection) {\n    this.client = client;\n    this.transport = transport;\n    this.createConnection = createConnection;\n    this[kEmitter2] = new EventTarget();\n    this.mockCloseController = new AbortController();\n    this.realCloseController = new AbortController();\n    this.transport.addEventListener(\"outgoing\", (event) => {\n      if (typeof this.realWebSocket === \"undefined\") {\n        return;\n      }\n      queueMicrotask(() => {\n        if (!event.defaultPrevented) {\n          this[kSend](event.data);\n        }\n      });\n    });\n    this.transport.addEventListener(\n      \"incoming\",\n      this.handleIncomingMessage.bind(this)\n    );\n  }\n  /**\n   * The `WebSocket` instance connected to the original server.\n   * Accessing this before calling `server.connect()` will throw.\n   */\n  get socket() {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n      this.realWebSocket,\n      'Cannot access \"socket\" on the original WebSocket server object: the connection is not open. Did you forget to call `server.connect()`?'\n    );\n    return this.realWebSocket;\n  }\n  /**\n   * Open connection to the original WebSocket server.\n   */\n  connect() {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n      !this.realWebSocket || this.realWebSocket.readyState !== WebSocket.OPEN,\n      'Failed to call \"connect()\" on the original WebSocket instance: the connection already open'\n    );\n    const realWebSocket = this.createConnection();\n    realWebSocket.binaryType = this.client.binaryType;\n    realWebSocket.addEventListener(\n      \"open\",\n      (event) => {\n        this[kEmitter2].dispatchEvent(\n          bindEvent(this.realWebSocket, new Event(\"open\", event))\n        );\n      },\n      { once: true }\n    );\n    realWebSocket.addEventListener(\"message\", (event) => {\n      this.transport.dispatchEvent(\n        bindEvent(\n          this.realWebSocket,\n          new MessageEvent(\"incoming\", {\n            data: event.data,\n            origin: event.origin\n          })\n        )\n      );\n    });\n    this.client.addEventListener(\n      \"close\",\n      (event) => {\n        this.handleMockClose(event);\n      },\n      {\n        signal: this.mockCloseController.signal\n      }\n    );\n    realWebSocket.addEventListener(\n      \"close\",\n      (event) => {\n        this.handleRealClose(event);\n      },\n      {\n        signal: this.realCloseController.signal\n      }\n    );\n    realWebSocket.addEventListener(\"error\", () => {\n      const errorEvent = bindEvent(\n        realWebSocket,\n        new Event(\"error\", { cancelable: true })\n      );\n      this[kEmitter2].dispatchEvent(errorEvent);\n      if (!errorEvent.defaultPrevented) {\n        this.client.dispatchEvent(bindEvent(this.client, new Event(\"error\")));\n      }\n    });\n    this.realWebSocket = realWebSocket;\n  }\n  /**\n   * Listen for the incoming events from the original WebSocket server.\n   */\n  addEventListener(event, listener, options) {\n    if (!Reflect.has(listener, kBoundListener2)) {\n      const boundListener = listener.bind(this.client);\n      Object.defineProperty(listener, kBoundListener2, {\n        value: boundListener,\n        enumerable: false\n      });\n    }\n    this[kEmitter2].addEventListener(\n      event,\n      Reflect.get(listener, kBoundListener2),\n      options\n    );\n  }\n  /**\n   * Remove the listener for the given event.\n   */\n  removeEventListener(event, listener, options) {\n    this[kEmitter2].removeEventListener(\n      event,\n      Reflect.get(listener, kBoundListener2),\n      options\n    );\n  }\n  /**\n   * Send data to the original WebSocket server.\n   * @example\n   * server.send('hello')\n   * server.send(new Blob(['hello']))\n   * server.send(new TextEncoder().encode('hello'))\n   */\n  send(data) {\n    this[kSend](data);\n  }\n  [(kEmitter2, kSend)](data) {\n    const { realWebSocket } = this;\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n      realWebSocket,\n      'Failed to call \"server.send()\" for \"%s\": the connection is not open. Did you forget to call \"server.connect()\"?',\n      this.client.url\n    );\n    if (realWebSocket.readyState === WebSocket.CLOSING || realWebSocket.readyState === WebSocket.CLOSED) {\n      return;\n    }\n    if (realWebSocket.readyState === WebSocket.CONNECTING) {\n      realWebSocket.addEventListener(\n        \"open\",\n        () => {\n          realWebSocket.send(data);\n        },\n        { once: true }\n      );\n      return;\n    }\n    realWebSocket.send(data);\n  }\n  /**\n   * Close the actual server connection.\n   */\n  close() {\n    const { realWebSocket } = this;\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(\n      realWebSocket,\n      'Failed to close server connection for \"%s\": the connection is not open. Did you forget to call \"server.connect()\"?',\n      this.client.url\n    );\n    this.realCloseController.abort();\n    if (realWebSocket.readyState === WebSocket.CLOSING || realWebSocket.readyState === WebSocket.CLOSED) {\n      return;\n    }\n    realWebSocket.close();\n    queueMicrotask(() => {\n      this[kEmitter2].dispatchEvent(\n        bindEvent(\n          this.realWebSocket,\n          new CancelableCloseEvent(\"close\", {\n            /**\n             * @note `server.close()` in the interceptor\n             * always results in clean closures.\n             */\n            code: 1e3,\n            cancelable: true\n          })\n        )\n      );\n    });\n  }\n  handleIncomingMessage(event) {\n    const messageEvent = bindEvent(\n      event.target,\n      new CancelableMessageEvent(\"message\", {\n        data: event.data,\n        origin: event.origin,\n        cancelable: true\n      })\n    );\n    this[kEmitter2].dispatchEvent(messageEvent);\n    if (!messageEvent.defaultPrevented) {\n      this.client.dispatchEvent(\n        bindEvent(\n          /**\n           * @note Bind the forwarded original server events\n           * to the mock WebSocket instance so it would\n           * dispatch them straight away.\n           */\n          this.client,\n          // Clone the message event again to prevent\n          // the \"already being dispatched\" exception.\n          new MessageEvent(\"message\", {\n            data: event.data,\n            origin: event.origin\n          })\n        )\n      );\n    }\n  }\n  handleMockClose(_event) {\n    if (this.realWebSocket) {\n      this.realWebSocket.close();\n    }\n  }\n  handleRealClose(event) {\n    this.mockCloseController.abort();\n    const closeEvent = bindEvent(\n      this.realWebSocket,\n      new CancelableCloseEvent(\"close\", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean,\n        cancelable: true\n      })\n    );\n    this[kEmitter2].dispatchEvent(closeEvent);\n    if (!closeEvent.defaultPrevented) {\n      this.client[kClose](event.code, event.reason);\n    }\n  }\n};\n\n// src/interceptors/WebSocket/WebSocketClassTransport.ts\nvar WebSocketClassTransport = class extends EventTarget {\n  constructor(socket) {\n    super();\n    this.socket = socket;\n    this.socket.addEventListener(\"close\", (event) => {\n      this.dispatchEvent(bindEvent(this.socket, new CloseEvent(\"close\", event)));\n    });\n    this.socket[kOnSend] = (data) => {\n      this.dispatchEvent(\n        bindEvent(\n          this.socket,\n          // Dispatch this as cancelable because \"client\" connection\n          // re-creates this message event (cannot dispatch the same event).\n          new CancelableMessageEvent(\"outgoing\", {\n            data,\n            origin: this.socket.url,\n            cancelable: true\n          })\n        )\n      );\n    };\n  }\n  addEventListener(type, callback, options) {\n    return super.addEventListener(type, callback, options);\n  }\n  dispatchEvent(event) {\n    return super.dispatchEvent(event);\n  }\n  send(data) {\n    queueMicrotask(() => {\n      if (this.socket.readyState === this.socket.CLOSING || this.socket.readyState === this.socket.CLOSED) {\n        return;\n      }\n      const dispatchEvent = () => {\n        this.socket.dispatchEvent(\n          bindEvent(\n            /**\n             * @note Setting this event's \"target\" to the\n             * WebSocket override instance is important.\n             * This way it can tell apart original incoming events\n             * (must be forwarded to the transport) from the\n             * mocked message events like the one below\n             * (must be dispatched on the client instance).\n             */\n            this.socket,\n            new MessageEvent(\"message\", {\n              data,\n              origin: this.socket.url\n            })\n          )\n        );\n      };\n      if (this.socket.readyState === this.socket.CONNECTING) {\n        this.socket.addEventListener(\n          \"open\",\n          () => {\n            dispatchEvent();\n          },\n          { once: true }\n        );\n      } else {\n        dispatchEvent();\n      }\n    });\n  }\n  close(code, reason) {\n    this.socket[kClose](code, reason);\n  }\n};\n\n// src/interceptors/WebSocket/index.ts\nvar _WebSocketInterceptor = class extends _chunk_QED3Q6Z2_mjs__WEBPACK_IMPORTED_MODULE_1__.Interceptor {\n  constructor() {\n    super(_WebSocketInterceptor.symbol);\n  }\n  checkEnvironment() {\n    return (0,_chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_0__.hasConfigurableGlobal)(\"WebSocket\");\n  }\n  setup() {\n    const originalWebSocketDescriptor = Object.getOwnPropertyDescriptor(\n      globalThis,\n      \"WebSocket\"\n    );\n    const WebSocketProxy = new Proxy(globalThis.WebSocket, {\n      construct: (target, args, newTarget) => {\n        const [url, protocols] = args;\n        const createConnection = () => {\n          return Reflect.construct(target, args, newTarget);\n        };\n        const socket = new WebSocketOverride(url, protocols);\n        const transport = new WebSocketClassTransport(socket);\n        queueMicrotask(() => {\n          try {\n            const server = new WebSocketServerConnection(\n              socket,\n              transport,\n              createConnection\n            );\n            const hasConnectionListeners = this.emitter.emit(\"connection\", {\n              client: new WebSocketClientConnection(socket, transport),\n              server,\n              info: {\n                protocols\n              }\n            });\n            if (hasConnectionListeners) {\n              socket[kPassthroughPromise].resolve(false);\n            } else {\n              socket[kPassthroughPromise].resolve(true);\n              server.connect();\n              server.addEventListener(\"open\", () => {\n                socket.dispatchEvent(bindEvent(socket, new Event(\"open\")));\n                if (server[\"realWebSocket\"]) {\n                  socket.protocol = server[\"realWebSocket\"].protocol;\n                }\n              });\n            }\n          } catch (error) {\n            if (error instanceof Error) {\n              socket.dispatchEvent(new Event(\"error\"));\n              if (socket.readyState !== WebSocket.CLOSING && socket.readyState !== WebSocket.CLOSED) {\n                socket[kClose](1011, error.message, false);\n              }\n              console.error(error);\n            }\n          }\n        });\n        return socket;\n      }\n    });\n    Object.defineProperty(globalThis, \"WebSocket\", {\n      value: WebSocketProxy,\n      configurable: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(\n        globalThis,\n        \"WebSocket\",\n        originalWebSocketDescriptor\n      );\n    });\n  }\n};\nvar WebSocketInterceptor = _WebSocketInterceptor;\nWebSocketInterceptor.symbol = Symbol(\"websocket\");\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/browser/interceptors/WebSocket/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestController: () => (/* binding */ RequestController),\n/* harmony export */   createServerErrorResponse: () => (/* binding */ createServerErrorResponse),\n/* harmony export */   emitAsync: () => (/* binding */ emitAsync),\n/* harmony export */   handleRequest: () => (/* binding */ handleRequest),\n/* harmony export */   isPropertyAccessible: () => (/* binding */ isPropertyAccessible)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(rsc)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @open-draft/until */ \"(rsc)/./node_modules/@open-draft/until/lib/index.mjs\");\n// src/RequestController.ts\n\n\n\n// src/InterceptorError.ts\nvar InterceptorError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InterceptorError\";\n    Object.setPrototypeOf(this, InterceptorError.prototype);\n  }\n};\n\n// src/RequestController.ts\nvar kRequestHandled = Symbol(\"kRequestHandled\");\nvar kResponsePromise = Symbol(\"kResponsePromise\");\nvar RequestController = class {\n  constructor(request) {\n    this.request = request;\n    this[kRequestHandled] = false;\n    this[kResponsePromise] = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__.DeferredPromise();\n  }\n  /**\n   * Respond to this request with the given `Response` instance.\n   * @example\n   * controller.respondWith(new Response())\n   * controller.respondWith(Response.json({ id }))\n   * controller.respondWith(Response.error())\n   */\n  respondWith(response) {\n    outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant.as(\n      InterceptorError,\n      !this[kRequestHandled],\n      'Failed to respond to the \"%s %s\" request: the \"request\" event has already been handled.',\n      this.request.method,\n      this.request.url\n    );\n    this[kRequestHandled] = true;\n    this[kResponsePromise].resolve(response);\n  }\n  /**\n   * Error this request with the given error.\n   * @example\n   * controller.errorWith()\n   * controller.errorWith(new Error('Oops!'))\n   */\n  errorWith(error) {\n    outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant.as(\n      InterceptorError,\n      !this[kRequestHandled],\n      'Failed to error the \"%s %s\" request: the \"request\" event has already been handled.',\n      this.request.method,\n      this.request.url\n    );\n    this[kRequestHandled] = true;\n    this[kResponsePromise].resolve(error);\n  }\n};\nkResponsePromise, kRequestHandled;\n\n// src/utils/emitAsync.ts\nasync function emitAsync(emitter, eventName, ...data) {\n  const listners = emitter.listeners(eventName);\n  if (listners.length === 0) {\n    return;\n  }\n  for (const listener of listners) {\n    await listener.apply(emitter, data);\n  }\n}\n\n// src/utils/handleRequest.ts\n\n\n\n// src/utils/isPropertyAccessible.ts\nfunction isPropertyAccessible(obj, key) {\n  try {\n    obj[key];\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// src/utils/responseUtils.ts\nfunction createServerErrorResponse(body) {\n  return new Response(\n    JSON.stringify(\n      body instanceof Error ? {\n        name: body.name,\n        message: body.message,\n        stack: body.stack\n      } : body\n    ),\n    {\n      status: 500,\n      statusText: \"Unhandled Exception\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n}\nfunction isResponseError(response) {\n  return isPropertyAccessible(response, \"type\") && response.type === \"error\";\n}\n\n// src/utils/isNodeLikeError.ts\nfunction isNodeLikeError(error) {\n  if (error == null) {\n    return false;\n  }\n  if (!(error instanceof Error)) {\n    return false;\n  }\n  return \"code\" in error && \"errno\" in error;\n}\n\n// src/utils/handleRequest.ts\nasync function handleRequest(options) {\n  const handleResponse = async (response) => {\n    if (response instanceof Error) {\n      options.onError(response);\n    } else if (isResponseError(response)) {\n      options.onRequestError(response);\n    } else {\n      await options.onResponse(response);\n    }\n    return true;\n  };\n  const handleResponseError = async (error) => {\n    if (error instanceof InterceptorError) {\n      throw result.error;\n    }\n    if (isNodeLikeError(error)) {\n      options.onError(error);\n      return true;\n    }\n    if (error instanceof Response) {\n      return await handleResponse(error);\n    }\n    return false;\n  };\n  options.emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\n    if (pendingRequestId !== options.requestId) {\n      return;\n    }\n    if (options.controller[kResponsePromise].state === \"pending\") {\n      options.controller[kResponsePromise].resolve(void 0);\n    }\n  });\n  const requestAbortPromise = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_1__.DeferredPromise();\n  if (options.request.signal) {\n    if (options.request.signal.aborted) {\n      requestAbortPromise.reject(options.request.signal.reason);\n    } else {\n      options.request.signal.addEventListener(\n        \"abort\",\n        () => {\n          requestAbortPromise.reject(options.request.signal.reason);\n        },\n        { once: true }\n      );\n    }\n  }\n  const result = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_2__.until)(async () => {\n    const requestListtenersPromise = emitAsync(options.emitter, \"request\", {\n      requestId: options.requestId,\n      request: options.request,\n      controller: options.controller\n    });\n    await Promise.race([\n      // Short-circuit the request handling promise if the request gets aborted.\n      requestAbortPromise,\n      requestListtenersPromise,\n      options.controller[kResponsePromise]\n    ]);\n    const mockedResponse = await options.controller[kResponsePromise];\n    return mockedResponse;\n  });\n  if (requestAbortPromise.state === \"rejected\") {\n    options.onError(requestAbortPromise.rejectionReason);\n    return true;\n  }\n  if (result.error) {\n    if (await handleResponseError(result.error)) {\n      return true;\n    }\n    if (options.emitter.listenerCount(\"unhandledException\") > 0) {\n      const unhandledExceptionController = new RequestController(\n        options.request\n      );\n      await emitAsync(options.emitter, \"unhandledException\", {\n        error: result.error,\n        request: options.request,\n        requestId: options.requestId,\n        controller: unhandledExceptionController\n      }).then(() => {\n        if (unhandledExceptionController[kResponsePromise].state === \"pending\") {\n          unhandledExceptionController[kResponsePromise].resolve(void 0);\n        }\n      });\n      const nextResult = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_2__.until)(\n        () => unhandledExceptionController[kResponsePromise]\n      );\n      if (nextResult.error) {\n        return handleResponseError(nextResult.error);\n      }\n      if (nextResult.data) {\n        return handleResponse(nextResult.data);\n      }\n    }\n    options.onResponse(createServerErrorResponse(result.error));\n    return true;\n  }\n  if (result.data) {\n    return handleResponse(result.data);\n  }\n  return false;\n}\n\n\n//# sourceMappingURL=chunk-5KMS5CTP.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay01S01TNUNUUC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUN1QztBQUN3Qjs7QUFFL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx5RUFBZTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLElBQUk7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsSUFBSSxpREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxpREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDbUY7QUFDekM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDZCQUE2QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsa0NBQWtDLHlFQUFnQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix3REFBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLCtCQUErQix3REFBSztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVFFO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2NodW5rLTVLTVM1Q1RQLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvUmVxdWVzdENvbnRyb2xsZXIudHNcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJvdXR2YXJpYW50XCI7XG5pbXBvcnQgeyBEZWZlcnJlZFByb21pc2UgfSBmcm9tIFwiQG9wZW4tZHJhZnQvZGVmZXJyZWQtcHJvbWlzZVwiO1xuXG4vLyBzcmMvSW50ZXJjZXB0b3JFcnJvci50c1xudmFyIEludGVyY2VwdG9yRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiSW50ZXJjZXB0b3JFcnJvclwiO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnRlcmNlcHRvckVycm9yLnByb3RvdHlwZSk7XG4gIH1cbn07XG5cbi8vIHNyYy9SZXF1ZXN0Q29udHJvbGxlci50c1xudmFyIGtSZXF1ZXN0SGFuZGxlZCA9IFN5bWJvbChcImtSZXF1ZXN0SGFuZGxlZFwiKTtcbnZhciBrUmVzcG9uc2VQcm9taXNlID0gU3ltYm9sKFwia1Jlc3BvbnNlUHJvbWlzZVwiKTtcbnZhciBSZXF1ZXN0Q29udHJvbGxlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocmVxdWVzdCkge1xuICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgdGhpc1trUmVxdWVzdEhhbmRsZWRdID0gZmFsc2U7XG4gICAgdGhpc1trUmVzcG9uc2VQcm9taXNlXSA9IG5ldyBEZWZlcnJlZFByb21pc2UoKTtcbiAgfVxuICAvKipcbiAgICogUmVzcG9uZCB0byB0aGlzIHJlcXVlc3Qgd2l0aCB0aGUgZ2l2ZW4gYFJlc3BvbnNlYCBpbnN0YW5jZS5cbiAgICogQGV4YW1wbGVcbiAgICogY29udHJvbGxlci5yZXNwb25kV2l0aChuZXcgUmVzcG9uc2UoKSlcbiAgICogY29udHJvbGxlci5yZXNwb25kV2l0aChSZXNwb25zZS5qc29uKHsgaWQgfSkpXG4gICAqIGNvbnRyb2xsZXIucmVzcG9uZFdpdGgoUmVzcG9uc2UuZXJyb3IoKSlcbiAgICovXG4gIHJlc3BvbmRXaXRoKHJlc3BvbnNlKSB7XG4gICAgaW52YXJpYW50LmFzKFxuICAgICAgSW50ZXJjZXB0b3JFcnJvcixcbiAgICAgICF0aGlzW2tSZXF1ZXN0SGFuZGxlZF0sXG4gICAgICAnRmFpbGVkIHRvIHJlc3BvbmQgdG8gdGhlIFwiJXMgJXNcIiByZXF1ZXN0OiB0aGUgXCJyZXF1ZXN0XCIgZXZlbnQgaGFzIGFscmVhZHkgYmVlbiBoYW5kbGVkLicsXG4gICAgICB0aGlzLnJlcXVlc3QubWV0aG9kLFxuICAgICAgdGhpcy5yZXF1ZXN0LnVybFxuICAgICk7XG4gICAgdGhpc1trUmVxdWVzdEhhbmRsZWRdID0gdHJ1ZTtcbiAgICB0aGlzW2tSZXNwb25zZVByb21pc2VdLnJlc29sdmUocmVzcG9uc2UpO1xuICB9XG4gIC8qKlxuICAgKiBFcnJvciB0aGlzIHJlcXVlc3Qgd2l0aCB0aGUgZ2l2ZW4gZXJyb3IuXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnRyb2xsZXIuZXJyb3JXaXRoKClcbiAgICogY29udHJvbGxlci5lcnJvcldpdGgobmV3IEVycm9yKCdPb3BzIScpKVxuICAgKi9cbiAgZXJyb3JXaXRoKGVycm9yKSB7XG4gICAgaW52YXJpYW50LmFzKFxuICAgICAgSW50ZXJjZXB0b3JFcnJvcixcbiAgICAgICF0aGlzW2tSZXF1ZXN0SGFuZGxlZF0sXG4gICAgICAnRmFpbGVkIHRvIGVycm9yIHRoZSBcIiVzICVzXCIgcmVxdWVzdDogdGhlIFwicmVxdWVzdFwiIGV2ZW50IGhhcyBhbHJlYWR5IGJlZW4gaGFuZGxlZC4nLFxuICAgICAgdGhpcy5yZXF1ZXN0Lm1ldGhvZCxcbiAgICAgIHRoaXMucmVxdWVzdC51cmxcbiAgICApO1xuICAgIHRoaXNba1JlcXVlc3RIYW5kbGVkXSA9IHRydWU7XG4gICAgdGhpc1trUmVzcG9uc2VQcm9taXNlXS5yZXNvbHZlKGVycm9yKTtcbiAgfVxufTtcbmtSZXNwb25zZVByb21pc2UsIGtSZXF1ZXN0SGFuZGxlZDtcblxuLy8gc3JjL3V0aWxzL2VtaXRBc3luYy50c1xuYXN5bmMgZnVuY3Rpb24gZW1pdEFzeW5jKGVtaXR0ZXIsIGV2ZW50TmFtZSwgLi4uZGF0YSkge1xuICBjb25zdCBsaXN0bmVycyA9IGVtaXR0ZXIubGlzdGVuZXJzKGV2ZW50TmFtZSk7XG4gIGlmIChsaXN0bmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0bmVycykge1xuICAgIGF3YWl0IGxpc3RlbmVyLmFwcGx5KGVtaXR0ZXIsIGRhdGEpO1xuICB9XG59XG5cbi8vIHNyYy91dGlscy9oYW5kbGVSZXF1ZXN0LnRzXG5pbXBvcnQgeyBEZWZlcnJlZFByb21pc2UgYXMgRGVmZXJyZWRQcm9taXNlMiB9IGZyb20gXCJAb3Blbi1kcmFmdC9kZWZlcnJlZC1wcm9taXNlXCI7XG5pbXBvcnQgeyB1bnRpbCB9IGZyb20gXCJAb3Blbi1kcmFmdC91bnRpbFwiO1xuXG4vLyBzcmMvdXRpbHMvaXNQcm9wZXJ0eUFjY2Vzc2libGUudHNcbmZ1bmN0aW9uIGlzUHJvcGVydHlBY2Nlc3NpYmxlKG9iaiwga2V5KSB7XG4gIHRyeSB7XG4gICAgb2JqW2tleV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gc3JjL3V0aWxzL3Jlc3BvbnNlVXRpbHMudHNcbmZ1bmN0aW9uIGNyZWF0ZVNlcnZlckVycm9yUmVzcG9uc2UoYm9keSkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKFxuICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgYm9keSBpbnN0YW5jZW9mIEVycm9yID8ge1xuICAgICAgICBuYW1lOiBib2R5Lm5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IGJvZHkubWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IGJvZHkuc3RhY2tcbiAgICAgIH0gOiBib2R5XG4gICAgKSxcbiAgICB7XG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIHN0YXR1c1RleHQ6IFwiVW5oYW5kbGVkIEV4Y2VwdGlvblwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgfVxuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VFcnJvcihyZXNwb25zZSkge1xuICByZXR1cm4gaXNQcm9wZXJ0eUFjY2Vzc2libGUocmVzcG9uc2UsIFwidHlwZVwiKSAmJiByZXNwb25zZS50eXBlID09PSBcImVycm9yXCI7XG59XG5cbi8vIHNyYy91dGlscy9pc05vZGVMaWtlRXJyb3IudHNcbmZ1bmN0aW9uIGlzTm9kZUxpa2VFcnJvcihlcnJvcikge1xuICBpZiAoZXJyb3IgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gXCJjb2RlXCIgaW4gZXJyb3IgJiYgXCJlcnJub1wiIGluIGVycm9yO1xufVxuXG4vLyBzcmMvdXRpbHMvaGFuZGxlUmVxdWVzdC50c1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdChvcHRpb25zKSB7XG4gIGNvbnN0IGhhbmRsZVJlc3BvbnNlID0gYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIG9wdGlvbnMub25FcnJvcihyZXNwb25zZSk7XG4gICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlRXJyb3IocmVzcG9uc2UpKSB7XG4gICAgICBvcHRpb25zLm9uUmVxdWVzdEVycm9yKHJlc3BvbnNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgb3B0aW9ucy5vblJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVJlc3BvbnNlRXJyb3IgPSBhc3luYyAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBJbnRlcmNlcHRvckVycm9yKSB7XG4gICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIGlmIChpc05vZGVMaWtlRXJyb3IoZXJyb3IpKSB7XG4gICAgICBvcHRpb25zLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gYXdhaXQgaGFuZGxlUmVzcG9uc2UoZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIG9wdGlvbnMuZW1pdHRlci5vbmNlKFwicmVxdWVzdFwiLCAoeyByZXF1ZXN0SWQ6IHBlbmRpbmdSZXF1ZXN0SWQgfSkgPT4ge1xuICAgIGlmIChwZW5kaW5nUmVxdWVzdElkICE9PSBvcHRpb25zLnJlcXVlc3RJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jb250cm9sbGVyW2tSZXNwb25zZVByb21pc2VdLnN0YXRlID09PSBcInBlbmRpbmdcIikge1xuICAgICAgb3B0aW9ucy5jb250cm9sbGVyW2tSZXNwb25zZVByb21pc2VdLnJlc29sdmUodm9pZCAwKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCByZXF1ZXN0QWJvcnRQcm9taXNlID0gbmV3IERlZmVycmVkUHJvbWlzZTIoKTtcbiAgaWYgKG9wdGlvbnMucmVxdWVzdC5zaWduYWwpIHtcbiAgICBpZiAob3B0aW9ucy5yZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXF1ZXN0QWJvcnRQcm9taXNlLnJlamVjdChvcHRpb25zLnJlcXVlc3Quc2lnbmFsLnJlYXNvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMucmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJhYm9ydFwiLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcmVxdWVzdEFib3J0UHJvbWlzZS5yZWplY3Qob3B0aW9ucy5yZXF1ZXN0LnNpZ25hbC5yZWFzb24pO1xuICAgICAgICB9LFxuICAgICAgICB7IG9uY2U6IHRydWUgfVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdW50aWwoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RMaXN0dGVuZXJzUHJvbWlzZSA9IGVtaXRBc3luYyhvcHRpb25zLmVtaXR0ZXIsIFwicmVxdWVzdFwiLCB7XG4gICAgICByZXF1ZXN0SWQ6IG9wdGlvbnMucmVxdWVzdElkLFxuICAgICAgcmVxdWVzdDogb3B0aW9ucy5yZXF1ZXN0LFxuICAgICAgY29udHJvbGxlcjogb3B0aW9ucy5jb250cm9sbGVyXG4gICAgfSk7XG4gICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgIC8vIFNob3J0LWNpcmN1aXQgdGhlIHJlcXVlc3QgaGFuZGxpbmcgcHJvbWlzZSBpZiB0aGUgcmVxdWVzdCBnZXRzIGFib3J0ZWQuXG4gICAgICByZXF1ZXN0QWJvcnRQcm9taXNlLFxuICAgICAgcmVxdWVzdExpc3R0ZW5lcnNQcm9taXNlLFxuICAgICAgb3B0aW9ucy5jb250cm9sbGVyW2tSZXNwb25zZVByb21pc2VdXG4gICAgXSk7XG4gICAgY29uc3QgbW9ja2VkUmVzcG9uc2UgPSBhd2FpdCBvcHRpb25zLmNvbnRyb2xsZXJba1Jlc3BvbnNlUHJvbWlzZV07XG4gICAgcmV0dXJuIG1vY2tlZFJlc3BvbnNlO1xuICB9KTtcbiAgaWYgKHJlcXVlc3RBYm9ydFByb21pc2Uuc3RhdGUgPT09IFwicmVqZWN0ZWRcIikge1xuICAgIG9wdGlvbnMub25FcnJvcihyZXF1ZXN0QWJvcnRQcm9taXNlLnJlamVjdGlvblJlYXNvbik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgIGlmIChhd2FpdCBoYW5kbGVSZXNwb25zZUVycm9yKHJlc3VsdC5lcnJvcikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5lbWl0dGVyLmxpc3RlbmVyQ291bnQoXCJ1bmhhbmRsZWRFeGNlcHRpb25cIikgPiAwKSB7XG4gICAgICBjb25zdCB1bmhhbmRsZWRFeGNlcHRpb25Db250cm9sbGVyID0gbmV3IFJlcXVlc3RDb250cm9sbGVyKFxuICAgICAgICBvcHRpb25zLnJlcXVlc3RcbiAgICAgICk7XG4gICAgICBhd2FpdCBlbWl0QXN5bmMob3B0aW9ucy5lbWl0dGVyLCBcInVuaGFuZGxlZEV4Y2VwdGlvblwiLCB7XG4gICAgICAgIGVycm9yOiByZXN1bHQuZXJyb3IsXG4gICAgICAgIHJlcXVlc3Q6IG9wdGlvbnMucmVxdWVzdCxcbiAgICAgICAgcmVxdWVzdElkOiBvcHRpb25zLnJlcXVlc3RJZCxcbiAgICAgICAgY29udHJvbGxlcjogdW5oYW5kbGVkRXhjZXB0aW9uQ29udHJvbGxlclxuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIGlmICh1bmhhbmRsZWRFeGNlcHRpb25Db250cm9sbGVyW2tSZXNwb25zZVByb21pc2VdLnN0YXRlID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHVuaGFuZGxlZEV4Y2VwdGlvbkNvbnRyb2xsZXJba1Jlc3BvbnNlUHJvbWlzZV0ucmVzb2x2ZSh2b2lkIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG5leHRSZXN1bHQgPSBhd2FpdCB1bnRpbChcbiAgICAgICAgKCkgPT4gdW5oYW5kbGVkRXhjZXB0aW9uQ29udHJvbGxlcltrUmVzcG9uc2VQcm9taXNlXVxuICAgICAgKTtcbiAgICAgIGlmIChuZXh0UmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXNwb25zZUVycm9yKG5leHRSZXN1bHQuZXJyb3IpO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRSZXN1bHQuZGF0YSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2UobmV4dFJlc3VsdC5kYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb3B0aW9ucy5vblJlc3BvbnNlKGNyZWF0ZVNlcnZlckVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHJlc3VsdC5kYXRhKSB7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3BvbnNlKHJlc3VsdC5kYXRhKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7XG4gIGlzUHJvcGVydHlBY2Nlc3NpYmxlLFxuICBjcmVhdGVTZXJ2ZXJFcnJvclJlc3BvbnNlLFxuICBSZXF1ZXN0Q29udHJvbGxlcixcbiAgZW1pdEFzeW5jLFxuICBoYW5kbGVSZXF1ZXN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstNUtNUzVDVFAubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBuffer: () => (/* binding */ decodeBuffer),\n/* harmony export */   encodeBuffer: () => (/* binding */ encodeBuffer),\n/* harmony export */   toArrayBuffer: () => (/* binding */ toArrayBuffer)\n/* harmony export */ });\n// src/utils/bufferUtils.ts\nvar encoder = new TextEncoder();\nfunction encodeBuffer(text) {\n  return encoder.encode(text);\n}\nfunction decodeBuffer(buffer, encoding) {\n  const decoder = new TextDecoder(encoding);\n  return decoder.decode(buffer);\n}\nfunction toArrayBuffer(array) {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength\n  );\n}\n\n\n//# sourceMappingURL=chunk-6HYIRFX2.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay02SFlJUkZYMi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2NodW5rLTZIWUlSRlgyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvYnVmZmVyVXRpbHMudHNcbnZhciBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5mdW5jdGlvbiBlbmNvZGVCdWZmZXIodGV4dCkge1xuICByZXR1cm4gZW5jb2Rlci5lbmNvZGUodGV4dCk7XG59XG5mdW5jdGlvbiBkZWNvZGVCdWZmZXIoYnVmZmVyLCBlbmNvZGluZykge1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG59XG5mdW5jdGlvbiB0b0FycmF5QnVmZmVyKGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5idWZmZXIuc2xpY2UoXG4gICAgYXJyYXkuYnl0ZU9mZnNldCxcbiAgICBhcnJheS5ieXRlT2Zmc2V0ICsgYXJyYXkuYnl0ZUxlbmd0aFxuICApO1xufVxuXG5leHBvcnQge1xuICBlbmNvZGVCdWZmZXIsXG4gIGRlY29kZUJ1ZmZlcixcbiAgdG9BcnJheUJ1ZmZlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTZIWUlSRlgyLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_PATCHED_MODULE: () => (/* binding */ IS_PATCHED_MODULE)\n/* harmony export */ });\n// src/glossary.ts\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\");\n\n\n//# sourceMappingURL=chunk-6YM4PLBI.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay02WU00UExCSS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcmlrdXNlbi93b3Jrc3BhY2UvbmV4dGpzLW1zdy1yZXByb2R1Y3Rpb24vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvY2h1bmstNllNNFBMQkkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9nbG9zc2FyeS50c1xudmFyIElTX1BBVENIRURfTU9EVUxFID0gU3ltYm9sKFwiaXNQYXRjaGVkTW9kdWxlXCIpO1xuXG5leHBvcnQge1xuICBJU19QQVRDSEVEX01PRFVMRVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTZZTTRQTEJJLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-CTGTMEFD.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-CTGTMEFD.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchInterceptor: () => (/* binding */ FetchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-TX5GBTFY.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs\");\n/* harmony import */ var _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-6YM4PLBI.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs\");\n/* harmony import */ var _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-5KMS5CTP.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @open-draft/deferred-promise */ \"(rsc)/./node_modules/@open-draft/deferred-promise/build/index.mjs\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zlib */ \"zlib\");\n\n\n\n\n\n// src/interceptors/fetch/index.ts\n\n\n\n// src/utils/canParseUrl.ts\nfunction canParseUrl(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n}\n\n// src/interceptors/fetch/utils/createNetworkError.ts\nfunction createNetworkError(cause) {\n  return Object.assign(new TypeError(\"Failed to fetch\"), {\n    cause\n  });\n}\n\n// src/interceptors/fetch/utils/followRedirect.ts\nvar REQUEST_BODY_HEADERS = [\n  \"content-encoding\",\n  \"content-language\",\n  \"content-location\",\n  \"content-type\",\n  \"content-length\"\n];\nvar kRedirectCount = Symbol(\"kRedirectCount\");\nasync function followFetchRedirect(request, response) {\n  if (response.status !== 303 && request.body != null) {\n    return Promise.reject(createNetworkError());\n  }\n  const requestUrl = new URL(request.url);\n  let locationUrl;\n  try {\n    locationUrl = new URL(response.headers.get(\"location\"), request.url);\n  } catch (error) {\n    return Promise.reject(createNetworkError(error));\n  }\n  if (!(locationUrl.protocol === \"http:\" || locationUrl.protocol === \"https:\")) {\n    return Promise.reject(\n      createNetworkError(\"URL scheme must be a HTTP(S) scheme\")\n    );\n  }\n  if (Reflect.get(request, kRedirectCount) > 20) {\n    return Promise.reject(createNetworkError(\"redirect count exceeded\"));\n  }\n  Object.defineProperty(request, kRedirectCount, {\n    value: (Reflect.get(request, kRedirectCount) || 0) + 1\n  });\n  if (request.mode === \"cors\" && (locationUrl.username || locationUrl.password) && !sameOrigin(requestUrl, locationUrl)) {\n    return Promise.reject(\n      createNetworkError('cross origin not allowed for request mode \"cors\"')\n    );\n  }\n  const requestInit = {};\n  if ([301, 302].includes(response.status) && request.method === \"POST\" || response.status === 303 && ![\"HEAD\", \"GET\"].includes(request.method)) {\n    requestInit.method = \"GET\";\n    requestInit.body = null;\n    REQUEST_BODY_HEADERS.forEach((headerName) => {\n      request.headers.delete(headerName);\n    });\n  }\n  if (!sameOrigin(requestUrl, locationUrl)) {\n    request.headers.delete(\"authorization\");\n    request.headers.delete(\"proxy-authorization\");\n    request.headers.delete(\"cookie\");\n    request.headers.delete(\"host\");\n  }\n  requestInit.headers = request.headers;\n  return fetch(new Request(locationUrl, requestInit));\n}\nfunction sameOrigin(left, right) {\n  if (left.origin === right.origin && left.origin === \"null\") {\n    return true;\n  }\n  if (left.protocol === right.protocol && left.hostname === right.hostname && left.port === right.port) {\n    return true;\n  }\n  return false;\n}\n\n// src/interceptors/fetch/utils/brotli-decompress.ts\n\nvar BrotliDecompressionStream = class extends TransformStream {\n  constructor() {\n    const decompress = zlib__WEBPACK_IMPORTED_MODULE_6__.createBrotliDecompress({\n      flush: zlib__WEBPACK_IMPORTED_MODULE_6__.constants.BROTLI_OPERATION_FLUSH,\n      finishFlush: zlib__WEBPACK_IMPORTED_MODULE_6__.constants.BROTLI_OPERATION_FLUSH\n    });\n    super({\n      async transform(chunk, controller) {\n        const buffer = Buffer.from(chunk);\n        const decompressed = await new Promise((resolve, reject) => {\n          decompress.write(buffer, (error) => {\n            if (error)\n              reject(error);\n          });\n          decompress.flush();\n          decompress.once(\"data\", (data) => resolve(data));\n          decompress.once(\"error\", (error) => reject(error));\n          decompress.once(\"end\", () => controller.terminate());\n        }).catch((error) => {\n          controller.error(error);\n        });\n        controller.enqueue(decompressed);\n      }\n    });\n  }\n};\n\n// src/interceptors/fetch/utils/decompression.ts\nvar PipelineStream = class extends TransformStream {\n  constructor(transformStreams, ...strategies) {\n    super({}, ...strategies);\n    const readable = [super.readable, ...transformStreams].reduce(\n      (readable2, transform) => readable2.pipeThrough(transform)\n    );\n    Object.defineProperty(this, \"readable\", {\n      get() {\n        return readable;\n      }\n    });\n  }\n};\nfunction parseContentEncoding(contentEncoding) {\n  return contentEncoding.toLowerCase().split(\",\").map((coding) => coding.trim());\n}\nfunction createDecompressionStream(contentEncoding) {\n  if (contentEncoding === \"\") {\n    return null;\n  }\n  const codings = parseContentEncoding(contentEncoding);\n  if (codings.length === 0) {\n    return null;\n  }\n  const transformers = codings.reduceRight(\n    (transformers2, coding) => {\n      if (coding === \"gzip\" || coding === \"x-gzip\") {\n        return transformers2.concat(new DecompressionStream(\"gzip\"));\n      } else if (coding === \"deflate\") {\n        return transformers2.concat(new DecompressionStream(\"deflate\"));\n      } else if (coding === \"br\") {\n        return transformers2.concat(new BrotliDecompressionStream());\n      } else {\n        transformers2.length = 0;\n      }\n      return transformers2;\n    },\n    []\n  );\n  return new PipelineStream(transformers);\n}\nfunction decompressResponse(response) {\n  if (response.body === null) {\n    return null;\n  }\n  const decompressionStream = createDecompressionStream(\n    response.headers.get(\"content-encoding\") || \"\"\n  );\n  if (!decompressionStream) {\n    return null;\n  }\n  response.body.pipeTo(decompressionStream.writable);\n  return decompressionStream.readable;\n}\n\n// src/interceptors/fetch/index.ts\nvar _FetchInterceptor = class extends _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.Interceptor {\n  constructor() {\n    super(_FetchInterceptor.symbol);\n  }\n  checkEnvironment() {\n    return (0,_chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_0__.hasConfigurableGlobal)(\"fetch\");\n  }\n  async setup() {\n    const pureFetch = globalThis.fetch;\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_4__.invariant)(\n      !pureFetch[_chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_1__.IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    );\n    globalThis.fetch = async (input, init) => {\n      const requestId = (0,_chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.createRequestId)();\n      const resolvedInput = typeof input === \"string\" && typeof location !== \"undefined\" && !canParseUrl(input) ? new URL(input, location.origin) : input;\n      const request = new Request(resolvedInput, init);\n      const responsePromise = new _open_draft_deferred_promise__WEBPACK_IMPORTED_MODULE_5__.DeferredPromise();\n      const controller = new _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_2__.RequestController(request);\n      this.logger.info(\"[%s] %s\", request.method, request.url);\n      this.logger.info(\"awaiting for the mocked response...\");\n      this.logger.info(\n        'emitting the \"request\" event for %s listener(s)...',\n        this.emitter.listenerCount(\"request\")\n      );\n      const isRequestHandled = await (0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_2__.handleRequest)({\n        request,\n        requestId,\n        emitter: this.emitter,\n        controller,\n        onResponse: async (rawResponse) => {\n          this.logger.info(\"received mocked response!\", {\n            rawResponse\n          });\n          const decompressedStream = decompressResponse(rawResponse);\n          const response = decompressedStream === null ? rawResponse : new _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.FetchResponse(decompressedStream, rawResponse);\n          _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.FetchResponse.setUrl(request.url, response);\n          if (_chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.FetchResponse.isRedirectResponse(response.status)) {\n            if (request.redirect === \"error\") {\n              responsePromise.reject(createNetworkError(\"unexpected redirect\"));\n              return;\n            }\n            if (request.redirect === \"follow\") {\n              followFetchRedirect(request, response).then(\n                (response2) => {\n                  responsePromise.resolve(response2);\n                },\n                (reason) => {\n                  responsePromise.reject(reason);\n                }\n              );\n              return;\n            }\n          }\n          if (this.emitter.listenerCount(\"response\") > 0) {\n            this.logger.info('emitting the \"response\" event...');\n            await (0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_2__.emitAsync)(this.emitter, \"response\", {\n              // Clone the mocked response for the \"response\" event listener.\n              // This way, the listener can read the response and not lock its body\n              // for the actual fetch consumer.\n              response: response.clone(),\n              isMockedResponse: true,\n              request,\n              requestId\n            });\n          }\n          responsePromise.resolve(response);\n        },\n        onRequestError: (response) => {\n          this.logger.info(\"request has errored!\", { response });\n          responsePromise.reject(createNetworkError(response));\n        },\n        onError: (error) => {\n          this.logger.info(\"request has been aborted!\", { error });\n          responsePromise.reject(error);\n        }\n      });\n      if (isRequestHandled) {\n        this.logger.info(\"request has been handled, returning mock promise...\");\n        return responsePromise;\n      }\n      this.logger.info(\n        \"no mocked response received, performing request as-is...\"\n      );\n      return pureFetch(request).then(async (response) => {\n        this.logger.info(\"original fetch performed\", response);\n        if (this.emitter.listenerCount(\"response\") > 0) {\n          this.logger.info('emitting the \"response\" event...');\n          const responseClone = response.clone();\n          await (0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_2__.emitAsync)(this.emitter, \"response\", {\n            response: responseClone,\n            isMockedResponse: false,\n            request,\n            requestId\n          });\n        }\n        return response;\n      });\n    };\n    Object.defineProperty(globalThis.fetch, _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_1__.IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_1__.IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.fetch = pureFetch;\n      this.logger.info(\n        'restored native \"globalThis.fetch\"!',\n        globalThis.fetch.name\n      );\n    });\n  }\n};\nvar FetchInterceptor = _FetchInterceptor;\nFetchInterceptor.symbol = Symbol(\"fetch\");\n\n\n//# sourceMappingURL=chunk-CTGTMEFD.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-CTGTMEFD.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-FWJSC2QD.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-FWJSC2QD.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientRequestInterceptor: () => (/* binding */ ClientRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5KMS5CTP.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! net */ \"net\");\n/* harmony import */ var _http_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! _http_common */ \"_http_common\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @open-draft/logger */ \"(rsc)/./node_modules/@open-draft/logger/lib/index.mjs\");\n\n\n\n// src/interceptors/ClientRequest/index.ts\n\n\n\n// src/interceptors/ClientRequest/MockHttpSocket.ts\n\n\n\n\n\n\n// src/interceptors/Socket/MockSocket.ts\n\n\n// src/interceptors/Socket/utils/normalizeSocketWriteArgs.ts\nfunction normalizeSocketWriteArgs(args) {\n  const normalized = [args[0], void 0, void 0];\n  if (typeof args[1] === \"string\") {\n    normalized[1] = args[1];\n  } else if (typeof args[1] === \"function\") {\n    normalized[2] = args[1];\n  }\n  if (typeof args[2] === \"function\") {\n    normalized[2] = args[2];\n  }\n  return normalized;\n}\n\n// src/interceptors/Socket/MockSocket.ts\nvar MockSocket = class extends net__WEBPACK_IMPORTED_MODULE_4__.Socket {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.connecting = false;\n    this.connect();\n    this._final = (callback) => {\n      callback(null);\n    };\n  }\n  connect() {\n    this.connecting = true;\n    return this;\n  }\n  write(...args) {\n    const [chunk, encoding, callback] = normalizeSocketWriteArgs(\n      args\n    );\n    this.options.write(chunk, encoding, callback);\n    return true;\n  }\n  end(...args) {\n    const [chunk, encoding, callback] = normalizeSocketWriteArgs(\n      args\n    );\n    this.options.write(chunk, encoding, callback);\n    return super.end.apply(this, args);\n  }\n  push(chunk, encoding) {\n    this.options.read(chunk, encoding);\n    return super.push(chunk, encoding);\n  }\n};\n\n// src/interceptors/Socket/utils/baseUrlFromConnectionOptions.ts\nfunction baseUrlFromConnectionOptions(options) {\n  if (\"href\" in options) {\n    return new URL(options.href);\n  }\n  const protocol = options.port === 443 ? \"https:\" : \"http:\";\n  const host = options.host;\n  const url = new URL(`${protocol}//${host}`);\n  if (options.port) {\n    url.port = options.port.toString();\n  }\n  if (options.path) {\n    url.pathname = options.path;\n  }\n  if (options.auth) {\n    const [username, password] = options.auth.split(\":\");\n    url.username = username;\n    url.password = password;\n  }\n  return url;\n}\n\n// src/interceptors/ClientRequest/utils/recordRawHeaders.ts\nvar kRawHeaders = Symbol(\"kRawHeaders\");\nvar kRestorePatches = Symbol(\"kRestorePatches\");\nfunction recordRawHeader(headers, args, behavior) {\n  ensureRawHeadersSymbol(headers, []);\n  const rawHeaders = Reflect.get(headers, kRawHeaders);\n  if (behavior === \"set\") {\n    for (let index = rawHeaders.length - 1; index >= 0; index--) {\n      if (rawHeaders[index][0].toLowerCase() === args[0].toLowerCase()) {\n        rawHeaders.splice(index, 1);\n      }\n    }\n  }\n  rawHeaders.push(args);\n}\nfunction ensureRawHeadersSymbol(headers, rawHeaders) {\n  if (Reflect.has(headers, kRawHeaders)) {\n    return;\n  }\n  defineRawHeadersSymbol(headers, rawHeaders);\n}\nfunction defineRawHeadersSymbol(headers, rawHeaders) {\n  Object.defineProperty(headers, kRawHeaders, {\n    value: rawHeaders,\n    enumerable: false,\n    // Mark the symbol as configurable so its value can be overridden.\n    // Overrides happen when merging raw headers from multiple sources.\n    // E.g. new Request(new Request(url, { headers }), { headers })\n    configurable: true\n  });\n}\nfunction recordRawFetchHeaders() {\n  if (Reflect.get(Headers, kRestorePatches)) {\n    return Reflect.get(Headers, kRestorePatches);\n  }\n  const {\n    Headers: OriginalHeaders,\n    Request: OriginalRequest,\n    Response: OriginalResponse\n  } = globalThis;\n  const { set, append, delete: headersDeleteMethod } = Headers.prototype;\n  Object.defineProperty(Headers, kRestorePatches, {\n    value: () => {\n      Headers.prototype.set = set;\n      Headers.prototype.append = append;\n      Headers.prototype.delete = headersDeleteMethod;\n      globalThis.Headers = OriginalHeaders;\n      globalThis.Request = OriginalRequest;\n      globalThis.Response = OriginalResponse;\n      Reflect.deleteProperty(Headers, kRestorePatches);\n    },\n    enumerable: false,\n    /**\n     * @note Mark this property as configurable\n     * so we can delete it using `Reflect.delete` during cleanup.\n     */\n    configurable: true\n  });\n  Object.defineProperty(globalThis, \"Headers\", {\n    enumerable: true,\n    writable: true,\n    value: new Proxy(Headers, {\n      construct(target, args, newTarget) {\n        const headersInit = args[0] || [];\n        if (headersInit instanceof Headers && Reflect.has(headersInit, kRawHeaders)) {\n          const headers2 = Reflect.construct(\n            target,\n            [Reflect.get(headersInit, kRawHeaders)],\n            newTarget\n          );\n          ensureRawHeadersSymbol(headers2, [\n            /**\n             * @note Spread the retrieved headers to clone them.\n             * This prevents multiple Headers instances from pointing\n             * at the same internal \"rawHeaders\" array.\n             */\n            ...Reflect.get(headersInit, kRawHeaders)\n          ]);\n          return headers2;\n        }\n        const headers = Reflect.construct(target, args, newTarget);\n        if (!Reflect.has(headers, kRawHeaders)) {\n          const rawHeadersInit = Array.isArray(headersInit) ? headersInit : Object.entries(headersInit);\n          ensureRawHeadersSymbol(headers, rawHeadersInit);\n        }\n        return headers;\n      }\n    })\n  });\n  Headers.prototype.set = new Proxy(Headers.prototype.set, {\n    apply(target, thisArg, args) {\n      recordRawHeader(thisArg, args, \"set\");\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n  Headers.prototype.append = new Proxy(Headers.prototype.append, {\n    apply(target, thisArg, args) {\n      recordRawHeader(thisArg, args, \"append\");\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n  Headers.prototype.delete = new Proxy(Headers.prototype.delete, {\n    apply(target, thisArg, args) {\n      const rawHeaders = Reflect.get(thisArg, kRawHeaders);\n      if (rawHeaders) {\n        for (let index = rawHeaders.length - 1; index >= 0; index--) {\n          if (rawHeaders[index][0].toLowerCase() === args[0].toLowerCase()) {\n            rawHeaders.splice(index, 1);\n          }\n        }\n      }\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n  Object.defineProperty(globalThis, \"Request\", {\n    enumerable: true,\n    writable: true,\n    value: new Proxy(Request, {\n      construct(target, args, newTarget) {\n        const request = Reflect.construct(target, args, newTarget);\n        const inferredRawHeaders = [];\n        if (typeof args[0] === \"object\" && args[0].headers != null) {\n          inferredRawHeaders.push(...inferRawHeaders(args[0].headers));\n        }\n        if (typeof args[1] === \"object\" && args[1].headers != null) {\n          inferredRawHeaders.push(...inferRawHeaders(args[1].headers));\n        }\n        if (inferredRawHeaders.length > 0) {\n          ensureRawHeadersSymbol(request.headers, inferredRawHeaders);\n        }\n        return request;\n      }\n    })\n  });\n  Object.defineProperty(globalThis, \"Response\", {\n    enumerable: true,\n    writable: true,\n    value: new Proxy(Response, {\n      construct(target, args, newTarget) {\n        const response = Reflect.construct(target, args, newTarget);\n        if (typeof args[1] === \"object\" && args[1].headers != null) {\n          ensureRawHeadersSymbol(\n            response.headers,\n            inferRawHeaders(args[1].headers)\n          );\n        }\n        return response;\n      }\n    })\n  });\n}\nfunction restoreHeadersPrototype() {\n  if (!Reflect.get(Headers, kRestorePatches)) {\n    return;\n  }\n  Reflect.get(Headers, kRestorePatches)();\n}\nfunction getRawFetchHeaders(headers) {\n  if (!Reflect.has(headers, kRawHeaders)) {\n    return Array.from(headers.entries());\n  }\n  const rawHeaders = Reflect.get(headers, kRawHeaders);\n  return rawHeaders.length > 0 ? rawHeaders : Array.from(headers.entries());\n}\nfunction inferRawHeaders(headers) {\n  if (headers instanceof Headers) {\n    return Reflect.get(headers, kRawHeaders) || [];\n  }\n  return Reflect.get(new Headers(headers), kRawHeaders);\n}\n\n// src/interceptors/ClientRequest/MockHttpSocket.ts\nvar kRequestId = Symbol(\"kRequestId\");\nvar MockHttpSocket = class extends MockSocket {\n  constructor(options) {\n    super({\n      write: (chunk, encoding, callback) => {\n        var _a;\n        if (this.socketState !== \"passthrough\") {\n          this.writeBuffer.push([chunk, encoding, callback]);\n        }\n        if (chunk) {\n          if (this.socketState === \"passthrough\") {\n            (_a = this.originalSocket) == null ? void 0 : _a.write(chunk, encoding, callback);\n          }\n          this.requestParser.execute(\n            Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding)\n          );\n        }\n      },\n      read: (chunk) => {\n        if (chunk !== null) {\n          this.responseParser.execute(\n            Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)\n          );\n        }\n      }\n    });\n    this.writeBuffer = [];\n    this.socketState = \"unknown\";\n    this.onRequestStart = (versionMajor, versionMinor, rawHeaders, _, path, __, ___, ____, shouldKeepAlive) => {\n      var _a;\n      this.shouldKeepAlive = shouldKeepAlive;\n      const url = new URL(path, this.baseUrl);\n      const method = ((_a = this.connectionOptions.method) == null ? void 0 : _a.toUpperCase()) || \"GET\";\n      const headers = _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.FetchResponse.parseRawHeaders(rawHeaders);\n      const canHaveBody = method !== \"GET\" && method !== \"HEAD\";\n      if (url.username || url.password) {\n        if (!headers.has(\"authorization\")) {\n          headers.set(\"authorization\", `Basic ${url.username}:${url.password}`);\n        }\n        url.username = \"\";\n        url.password = \"\";\n      }\n      if (canHaveBody) {\n        this.requestStream = new stream__WEBPACK_IMPORTED_MODULE_6__.Readable({\n          /**\n           * @note Provide the `read()` method so a `Readable` could be\n           * used as the actual request body (the stream calls \"read()\").\n           * We control the queue in the onRequestBody/End functions.\n           */\n          read: () => {\n            this.flushWriteBuffer();\n          }\n        });\n      }\n      const requestId = (0,_chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.createRequestId)();\n      this.request = new Request(url, {\n        method,\n        headers,\n        credentials: \"same-origin\",\n        // @ts-expect-error Undocumented Fetch property.\n        duplex: canHaveBody ? \"half\" : void 0,\n        body: canHaveBody ? stream__WEBPACK_IMPORTED_MODULE_6__.Readable.toWeb(this.requestStream) : null\n      });\n      Reflect.set(this.request, kRequestId, requestId);\n      if (this.request.headers.has(_chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_REQUEST_ID_HEADER_NAME)) {\n        this.passthrough();\n        return;\n      }\n      this.onRequest({\n        requestId,\n        request: this.request,\n        socket: this\n      });\n    };\n    this.onResponseStart = (versionMajor, versionMinor, rawHeaders, method, url, status, statusText) => {\n      const headers = _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.FetchResponse.parseRawHeaders(rawHeaders);\n      const response = new _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.FetchResponse(\n        /**\n         * @note The Fetch API response instance exposed to the consumer\n         * is created over the response stream of the HTTP parser. It is NOT\n         * related to the Socket instance. This way, you can read response body\n         * in response listener while the Socket instance delays the emission\n         * of \"end\" and other events until those response listeners are finished.\n         */\n        _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.FetchResponse.isResponseWithBody(status) ? stream__WEBPACK_IMPORTED_MODULE_6__.Readable.toWeb(\n          this.responseStream = new stream__WEBPACK_IMPORTED_MODULE_6__.Readable({ read() {\n          } })\n        ) : null,\n        {\n          url,\n          status,\n          statusText,\n          headers\n        }\n      );\n      (0,outvariant__WEBPACK_IMPORTED_MODULE_7__.invariant)(\n        this.request,\n        \"Failed to handle a response: request does not exist\"\n      );\n      if (this.request.headers.has(_chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_REQUEST_ID_HEADER_NAME)) {\n        return;\n      }\n      this.responseListenersPromise = this.onResponse({\n        response,\n        isMockedResponse: this.socketState === \"mock\",\n        requestId: Reflect.get(this.request, kRequestId),\n        request: this.request,\n        socket: this\n      });\n    };\n    this.connectionOptions = options.connectionOptions;\n    this.createConnection = options.createConnection;\n    this.onRequest = options.onRequest;\n    this.onResponse = options.onResponse;\n    this.baseUrl = baseUrlFromConnectionOptions(this.connectionOptions);\n    this.requestParser = new _http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser();\n    this.requestParser.initialize(_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.REQUEST, {});\n    this.requestParser[_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.kOnHeadersComplete] = this.onRequestStart.bind(this);\n    this.requestParser[_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.kOnBody] = this.onRequestBody.bind(this);\n    this.requestParser[_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.kOnMessageComplete] = this.onRequestEnd.bind(this);\n    this.responseParser = new _http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser();\n    this.responseParser.initialize(_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.RESPONSE, {});\n    this.responseParser[_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.kOnHeadersComplete] = this.onResponseStart.bind(this);\n    this.responseParser[_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.kOnBody] = this.onResponseBody.bind(this);\n    this.responseParser[_http_common__WEBPACK_IMPORTED_MODULE_5__.HTTPParser.kOnMessageComplete] = this.onResponseEnd.bind(this);\n    this.once(\"finish\", () => this.requestParser.free());\n    if (this.baseUrl.protocol === \"https:\") {\n      Reflect.set(this, \"encrypted\", true);\n      Reflect.set(this, \"authorized\", false);\n      Reflect.set(this, \"getProtocol\", () => \"TLSv1.3\");\n      Reflect.set(this, \"getSession\", () => void 0);\n      Reflect.set(this, \"isSessionReused\", () => false);\n    }\n  }\n  emit(event, ...args) {\n    const emitEvent = super.emit.bind(this, event, ...args);\n    if (this.responseListenersPromise) {\n      this.responseListenersPromise.finally(emitEvent);\n      return this.listenerCount(event) > 0;\n    }\n    return emitEvent();\n  }\n  destroy(error) {\n    this.responseParser.free();\n    if (error) {\n      this.emit(\"error\", error);\n    }\n    return super.destroy(error);\n  }\n  /**\n   * Establish this Socket connection as-is and pipe\n   * its data/events through this Socket.\n   */\n  passthrough() {\n    this.socketState = \"passthrough\";\n    if (this.destroyed) {\n      return;\n    }\n    const socket = this.createConnection();\n    this.originalSocket = socket;\n    this.once(\"error\", (error) => {\n      socket.destroy(error);\n    });\n    this.address = socket.address.bind(socket);\n    let writeArgs;\n    let headersWritten = false;\n    while (writeArgs = this.writeBuffer.shift()) {\n      if (writeArgs !== void 0) {\n        if (!headersWritten) {\n          const [chunk, encoding, callback] = writeArgs;\n          const chunkString = chunk.toString();\n          const chunkBeforeRequestHeaders = chunkString.slice(\n            0,\n            chunkString.indexOf(\"\\r\\n\") + 2\n          );\n          const chunkAfterRequestHeaders = chunkString.slice(\n            chunk.indexOf(\"\\r\\n\\r\\n\")\n          );\n          const rawRequestHeaders = getRawFetchHeaders(this.request.headers);\n          const requestHeadersString = rawRequestHeaders.filter(([name]) => {\n            return name.toLowerCase() !== _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_REQUEST_ID_HEADER_NAME;\n          }).map(([name, value]) => `${name}: ${value}`).join(\"\\r\\n\");\n          const headersChunk = `${chunkBeforeRequestHeaders}${requestHeadersString}${chunkAfterRequestHeaders}`;\n          socket.write(headersChunk, encoding, callback);\n          headersWritten = true;\n          continue;\n        }\n        socket.write(...writeArgs);\n      }\n    }\n    if (Reflect.get(socket, \"encrypted\")) {\n      const tlsProperties = [\n        \"encrypted\",\n        \"authorized\",\n        \"getProtocol\",\n        \"getSession\",\n        \"isSessionReused\"\n      ];\n      tlsProperties.forEach((propertyName) => {\n        Object.defineProperty(this, propertyName, {\n          enumerable: true,\n          get: () => {\n            const value = Reflect.get(socket, propertyName);\n            return typeof value === \"function\" ? value.bind(socket) : value;\n          }\n        });\n      });\n    }\n    socket.on(\"lookup\", (...args) => this.emit(\"lookup\", ...args)).on(\"connect\", () => {\n      this.connecting = socket.connecting;\n      this.emit(\"connect\");\n    }).on(\"secureConnect\", () => this.emit(\"secureConnect\")).on(\"secure\", () => this.emit(\"secure\")).on(\"session\", (session) => this.emit(\"session\", session)).on(\"ready\", () => this.emit(\"ready\")).on(\"drain\", () => this.emit(\"drain\")).on(\"data\", (chunk) => {\n      this.push(chunk);\n    }).on(\"error\", (error) => {\n      Reflect.set(this, \"_hadError\", Reflect.get(socket, \"_hadError\"));\n      this.emit(\"error\", error);\n    }).on(\"resume\", () => this.emit(\"resume\")).on(\"timeout\", () => this.emit(\"timeout\")).on(\"prefinish\", () => this.emit(\"prefinish\")).on(\"finish\", () => this.emit(\"finish\")).on(\"close\", (hadError) => this.emit(\"close\", hadError)).on(\"end\", () => this.emit(\"end\"));\n  }\n  /**\n   * Convert the given Fetch API `Response` instance to an\n   * HTTP message and push it to the socket.\n   */\n  async respondWith(response) {\n    var _a;\n    if (this.destroyed) {\n      return;\n    }\n    if ((0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_0__.isPropertyAccessible)(response, \"type\") && response.type === \"error\") {\n      this.errorWith(new TypeError(\"Network error\"));\n      return;\n    }\n    this.mockConnect();\n    this.socketState = \"mock\";\n    this.flushWriteBuffer();\n    const serverResponse = new http__WEBPACK_IMPORTED_MODULE_2__.ServerResponse(new http__WEBPACK_IMPORTED_MODULE_2__.IncomingMessage(this));\n    serverResponse.assignSocket(\n      new MockSocket({\n        write: (chunk, encoding, callback) => {\n          this.push(chunk, encoding);\n          callback == null ? void 0 : callback();\n        },\n        read() {\n        }\n      })\n    );\n    serverResponse.removeHeader(\"connection\");\n    serverResponse.removeHeader(\"date\");\n    const rawResponseHeaders = getRawFetchHeaders(response.headers);\n    serverResponse.writeHead(\n      response.status,\n      response.statusText || http__WEBPACK_IMPORTED_MODULE_2__.STATUS_CODES[response.status],\n      rawResponseHeaders\n    );\n    this.once(\"error\", () => {\n      serverResponse.destroy();\n    });\n    if (response.body) {\n      try {\n        const reader = response.body.getReader();\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            serverResponse.end();\n            break;\n          }\n          serverResponse.write(value);\n        }\n      } catch (error) {\n        this.respondWith((0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerErrorResponse)(error));\n        return;\n      }\n    } else {\n      serverResponse.end();\n    }\n    if (!this.shouldKeepAlive) {\n      this.emit(\"readable\");\n      (_a = this.responseStream) == null ? void 0 : _a.push(null);\n      this.push(null);\n    }\n  }\n  /**\n   * Close this socket connection with the given error.\n   */\n  errorWith(error) {\n    this.destroy(error);\n  }\n  mockConnect() {\n    this.connecting = false;\n    const isIPv6 = net__WEBPACK_IMPORTED_MODULE_4__.isIPv6(this.connectionOptions.hostname) || this.connectionOptions.family === 6;\n    const addressInfo = {\n      address: isIPv6 ? \"::1\" : \"127.0.0.1\",\n      family: isIPv6 ? \"IPv6\" : \"IPv4\",\n      port: this.connectionOptions.port\n    };\n    this.address = () => addressInfo;\n    this.emit(\n      \"lookup\",\n      null,\n      addressInfo.address,\n      addressInfo.family === \"IPv6\" ? 6 : 4,\n      this.connectionOptions.host\n    );\n    this.emit(\"connect\");\n    this.emit(\"ready\");\n    if (this.baseUrl.protocol === \"https:\") {\n      this.emit(\"secure\");\n      this.emit(\"secureConnect\");\n      this.emit(\n        \"session\",\n        this.connectionOptions.session || Buffer.from(\"mock-session-renegotiate\")\n      );\n      this.emit(\"session\", Buffer.from(\"mock-session-resume\"));\n    }\n  }\n  flushWriteBuffer() {\n    for (const writeCall of this.writeBuffer) {\n      if (typeof writeCall[2] === \"function\") {\n        writeCall[2]();\n        writeCall[2] = void 0;\n      }\n    }\n  }\n  onRequestBody(chunk) {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_7__.invariant)(\n      this.requestStream,\n      \"Failed to write to a request stream: stream does not exist\"\n    );\n    this.requestStream.push(chunk);\n  }\n  onRequestEnd() {\n    if (this.requestStream) {\n      this.requestStream.push(null);\n    }\n  }\n  onResponseBody(chunk) {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_7__.invariant)(\n      this.responseStream,\n      \"Failed to write to a response stream: stream does not exist\"\n    );\n    this.responseStream.push(chunk);\n  }\n  onResponseEnd() {\n    if (this.responseStream) {\n      this.responseStream.push(null);\n    }\n  }\n};\n\n// src/interceptors/ClientRequest/agents.ts\n\n\nvar MockAgent = class extends http__WEBPACK_IMPORTED_MODULE_2__.Agent {\n  constructor(options) {\n    super();\n    this.customAgent = options.customAgent;\n    this.onRequest = options.onRequest;\n    this.onResponse = options.onResponse;\n  }\n  createConnection(options, callback) {\n    const createConnection = this.customAgent instanceof http__WEBPACK_IMPORTED_MODULE_2__.Agent ? this.customAgent.createConnection : super.createConnection;\n    const createConnectionOptions = this.customAgent instanceof http__WEBPACK_IMPORTED_MODULE_2__.Agent ? {\n      ...options,\n      ...this.customAgent.options\n    } : options;\n    const socket = new MockHttpSocket({\n      connectionOptions: options,\n      createConnection: createConnection.bind(\n        this.customAgent || this,\n        createConnectionOptions,\n        callback\n      ),\n      onRequest: this.onRequest.bind(this),\n      onResponse: this.onResponse.bind(this)\n    });\n    return socket;\n  }\n};\nvar MockHttpsAgent = class extends https__WEBPACK_IMPORTED_MODULE_3__.Agent {\n  constructor(options) {\n    super();\n    this.customAgent = options.customAgent;\n    this.onRequest = options.onRequest;\n    this.onResponse = options.onResponse;\n  }\n  createConnection(options, callback) {\n    const createConnection = this.customAgent instanceof https__WEBPACK_IMPORTED_MODULE_3__.Agent ? this.customAgent.createConnection : super.createConnection;\n    const createConnectionOptions = this.customAgent instanceof https__WEBPACK_IMPORTED_MODULE_3__.Agent ? {\n      ...options,\n      ...this.customAgent.options\n    } : options;\n    const socket = new MockHttpSocket({\n      connectionOptions: options,\n      createConnection: createConnection.bind(\n        this.customAgent || this,\n        createConnectionOptions,\n        callback\n      ),\n      onRequest: this.onRequest.bind(this),\n      onResponse: this.onResponse.bind(this)\n    });\n    return socket;\n  }\n};\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestArgs.ts\n\n\n\n\n\n\n// src/utils/getUrlByRequestOptions.ts\n\n\nvar logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_9__.Logger(\"utils getUrlByRequestOptions\");\nvar DEFAULT_PATH = \"/\";\nvar DEFAULT_PROTOCOL = \"http:\";\nvar DEFAULT_HOSTNAME = \"localhost\";\nvar SSL_PORT = 443;\nfunction getAgent(options) {\n  return options.agent instanceof http__WEBPACK_IMPORTED_MODULE_2__.Agent ? options.agent : void 0;\n}\nfunction getProtocolByRequestOptions(options) {\n  var _a;\n  if (options.protocol) {\n    return options.protocol;\n  }\n  const agent = getAgent(options);\n  const agentProtocol = agent == null ? void 0 : agent.protocol;\n  if (agentProtocol) {\n    return agentProtocol;\n  }\n  const port = getPortByRequestOptions(options);\n  const isSecureRequest = options.cert || port === SSL_PORT;\n  return isSecureRequest ? \"https:\" : ((_a = options.uri) == null ? void 0 : _a.protocol) || DEFAULT_PROTOCOL;\n}\nfunction getPortByRequestOptions(options) {\n  if (options.port) {\n    return Number(options.port);\n  }\n  const agent = getAgent(options);\n  if (agent == null ? void 0 : agent.options.port) {\n    return Number(agent.options.port);\n  }\n  if (agent == null ? void 0 : agent.defaultPort) {\n    return Number(agent.defaultPort);\n  }\n  return void 0;\n}\nfunction getAuthByRequestOptions(options) {\n  if (options.auth) {\n    const [username, password] = options.auth.split(\":\");\n    return { username, password };\n  }\n}\nfunction isRawIPv6Address(host) {\n  return host.includes(\":\") && !host.startsWith(\"[\") && !host.endsWith(\"]\");\n}\nfunction getHostname(options) {\n  let host = options.hostname || options.host;\n  if (host) {\n    if (isRawIPv6Address(host)) {\n      host = `[${host}]`;\n    }\n    return new URL(`http://${host}`).hostname;\n  }\n  return DEFAULT_HOSTNAME;\n}\nfunction getUrlByRequestOptions(options) {\n  logger.info(\"request options\", options);\n  if (options.uri) {\n    logger.info(\n      'constructing url from explicitly provided \"options.uri\": %s',\n      options.uri\n    );\n    return new URL(options.uri.href);\n  }\n  logger.info(\"figuring out url from request options...\");\n  const protocol = getProtocolByRequestOptions(options);\n  logger.info(\"protocol\", protocol);\n  const port = getPortByRequestOptions(options);\n  logger.info(\"port\", port);\n  const hostname = getHostname(options);\n  logger.info(\"hostname\", hostname);\n  const path = options.path || DEFAULT_PATH;\n  logger.info(\"path\", path);\n  const credentials = getAuthByRequestOptions(options);\n  logger.info(\"credentials\", credentials);\n  const authString = credentials ? `${credentials.username}:${credentials.password}@` : \"\";\n  logger.info(\"auth string:\", authString);\n  const portString = typeof port !== \"undefined\" ? `:${port}` : \"\";\n  const url = new URL(`${protocol}//${hostname}${portString}${path}`);\n  url.username = (credentials == null ? void 0 : credentials.username) || \"\";\n  url.password = (credentials == null ? void 0 : credentials.password) || \"\";\n  logger.info(\"created url:\", url);\n  return url;\n}\n\n// src/utils/cloneObject.ts\n\nvar logger2 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_9__.Logger(\"cloneObject\");\nfunction isPlainObject(obj) {\n  var _a;\n  logger2.info(\"is plain object?\", obj);\n  if (obj == null || !((_a = obj.constructor) == null ? void 0 : _a.name)) {\n    logger2.info(\"given object is undefined, not a plain object...\");\n    return false;\n  }\n  logger2.info(\"checking the object constructor:\", obj.constructor.name);\n  return obj.constructor.name === \"Object\";\n}\nfunction cloneObject(obj) {\n  logger2.info(\"cloning object:\", obj);\n  const enumerableProperties = Object.entries(obj).reduce(\n    (acc, [key, value]) => {\n      logger2.info(\"analyzing key-value pair:\", key, value);\n      acc[key] = isPlainObject(value) ? cloneObject(value) : value;\n      return acc;\n    },\n    {}\n  );\n  return isPlainObject(obj) ? enumerableProperties : Object.assign(Object.getPrototypeOf(obj), enumerableProperties);\n}\n\n// src/utils/isObject.ts\nfunction isObject(value, loose = false) {\n  return loose ? Object.prototype.toString.call(value).startsWith(\"[object \") : Object.prototype.toString.call(value) === \"[object Object]\";\n}\n\n// src/interceptors/ClientRequest/utils/normalizeClientRequestArgs.ts\nvar logger3 = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_9__.Logger(\"http normalizeClientRequestArgs\");\nfunction resolveRequestOptions(args, url) {\n  if (typeof args[1] === \"undefined\" || typeof args[1] === \"function\") {\n    logger3.info(\"request options not provided, deriving from the url\", url);\n    return (0,url__WEBPACK_IMPORTED_MODULE_8__.urlToHttpOptions)(url);\n  }\n  if (args[1]) {\n    logger3.info(\"has custom RequestOptions!\", args[1]);\n    const requestOptionsFromUrl = (0,url__WEBPACK_IMPORTED_MODULE_8__.urlToHttpOptions)(url);\n    logger3.info(\"derived RequestOptions from the URL:\", requestOptionsFromUrl);\n    logger3.info(\"cloning RequestOptions...\");\n    const clonedRequestOptions = cloneObject(args[1]);\n    logger3.info(\"successfully cloned RequestOptions!\", clonedRequestOptions);\n    return {\n      ...requestOptionsFromUrl,\n      ...clonedRequestOptions\n    };\n  }\n  logger3.info(\"using an empty object as request options\");\n  return {};\n}\nfunction overrideUrlByRequestOptions(url, options) {\n  url.host = options.host || url.host;\n  url.hostname = options.hostname || url.hostname;\n  url.port = options.port ? options.port.toString() : url.port;\n  if (options.path) {\n    const parsedOptionsPath = (0,url__WEBPACK_IMPORTED_MODULE_8__.parse)(options.path, false);\n    url.pathname = parsedOptionsPath.pathname || \"\";\n    url.search = parsedOptionsPath.search || \"\";\n  }\n  return url;\n}\nfunction resolveCallback(args) {\n  return typeof args[1] === \"function\" ? args[1] : args[2];\n}\nfunction normalizeClientRequestArgs(defaultProtocol, args) {\n  let url;\n  let options;\n  let callback;\n  logger3.info(\"arguments\", args);\n  logger3.info(\"using default protocol:\", defaultProtocol);\n  if (args.length === 0) {\n    const url2 = new url__WEBPACK_IMPORTED_MODULE_8__.URL(\"http://localhost\");\n    const options2 = resolveRequestOptions(args, url2);\n    return [url2, options2];\n  }\n  if (typeof args[0] === \"string\") {\n    logger3.info(\"first argument is a location string:\", args[0]);\n    url = new url__WEBPACK_IMPORTED_MODULE_8__.URL(args[0]);\n    logger3.info(\"created a url:\", url);\n    const requestOptionsFromUrl = (0,url__WEBPACK_IMPORTED_MODULE_8__.urlToHttpOptions)(url);\n    logger3.info(\"request options from url:\", requestOptionsFromUrl);\n    options = resolveRequestOptions(args, url);\n    logger3.info(\"resolved request options:\", options);\n    callback = resolveCallback(args);\n  } else if (args[0] instanceof url__WEBPACK_IMPORTED_MODULE_8__.URL) {\n    url = args[0];\n    logger3.info(\"first argument is a URL:\", url);\n    if (typeof args[1] !== \"undefined\" && isObject(args[1])) {\n      url = overrideUrlByRequestOptions(url, args[1]);\n    }\n    options = resolveRequestOptions(args, url);\n    logger3.info(\"derived request options:\", options);\n    callback = resolveCallback(args);\n  } else if (\"hash\" in args[0] && !(\"method\" in args[0])) {\n    const [legacyUrl] = args;\n    logger3.info(\"first argument is a legacy URL:\", legacyUrl);\n    if (legacyUrl.hostname === null) {\n      logger3.info(\"given legacy URL is relative (no hostname)\");\n      return isObject(args[1]) ? normalizeClientRequestArgs(defaultProtocol, [\n        { path: legacyUrl.path, ...args[1] },\n        args[2]\n      ]) : normalizeClientRequestArgs(defaultProtocol, [\n        { path: legacyUrl.path },\n        args[1]\n      ]);\n    }\n    logger3.info(\"given legacy url is absolute\");\n    const resolvedUrl = new url__WEBPACK_IMPORTED_MODULE_8__.URL(legacyUrl.href);\n    return args[1] === void 0 ? normalizeClientRequestArgs(defaultProtocol, [resolvedUrl]) : typeof args[1] === \"function\" ? normalizeClientRequestArgs(defaultProtocol, [resolvedUrl, args[1]]) : normalizeClientRequestArgs(defaultProtocol, [\n      resolvedUrl,\n      args[1],\n      args[2]\n    ]);\n  } else if (isObject(args[0])) {\n    options = { ...args[0] };\n    logger3.info(\"first argument is RequestOptions:\", options);\n    options.protocol = options.protocol || defaultProtocol;\n    logger3.info(\"normalized request options:\", options);\n    url = getUrlByRequestOptions(options);\n    logger3.info(\"created a URL from RequestOptions:\", url.href);\n    callback = resolveCallback(args);\n  } else {\n    throw new Error(\n      `Failed to construct ClientRequest with these parameters: ${args}`\n    );\n  }\n  options.protocol = options.protocol || url.protocol;\n  options.method = options.method || \"GET\";\n  if (typeof options.agent === \"undefined\") {\n    const agent = options.protocol === \"https:\" ? new https__WEBPACK_IMPORTED_MODULE_3__.Agent({\n      // Any other value other than false is considered as true, so we don't add this property if undefined.\n      ...\"rejectUnauthorized\" in options && {\n        rejectUnauthorized: options.rejectUnauthorized\n      }\n    }) : new http__WEBPACK_IMPORTED_MODULE_2__.Agent();\n    options.agent = agent;\n    logger3.info(\"resolved fallback agent:\", agent);\n  }\n  if (!options._defaultAgent) {\n    logger3.info(\n      'has no default agent, setting the default agent for \"%s\"',\n      options.protocol\n    );\n    options._defaultAgent = options.protocol === \"https:\" ? https__WEBPACK_IMPORTED_MODULE_3__.globalAgent : http__WEBPACK_IMPORTED_MODULE_2__.globalAgent;\n  }\n  logger3.info(\"successfully resolved url:\", url.href);\n  logger3.info(\"successfully resolved options:\", options);\n  logger3.info(\"successfully resolved callback:\", callback);\n  if (!(url instanceof url__WEBPACK_IMPORTED_MODULE_8__.URL)) {\n    url = url.toString();\n  }\n  return [url, options, callback];\n}\n\n// src/interceptors/ClientRequest/index.ts\nvar _ClientRequestInterceptor = class extends _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_1__.Interceptor {\n  constructor() {\n    super(_ClientRequestInterceptor.symbol);\n    this.onRequest = async ({\n      request,\n      socket\n    }) => {\n      const requestId = Reflect.get(request, kRequestId);\n      const controller = new _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_0__.RequestController(request);\n      const isRequestHandled = await (0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_0__.handleRequest)({\n        request,\n        requestId,\n        controller,\n        emitter: this.emitter,\n        onResponse: (response) => {\n          socket.respondWith(response);\n        },\n        onRequestError: (response) => {\n          socket.respondWith(response);\n        },\n        onError: (error) => {\n          if (error instanceof Error) {\n            socket.errorWith(error);\n          }\n        }\n      });\n      if (!isRequestHandled) {\n        return socket.passthrough();\n      }\n    };\n    this.onResponse = async ({\n      requestId,\n      request,\n      response,\n      isMockedResponse\n    }) => {\n      return (0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_0__.emitAsync)(this.emitter, \"response\", {\n        requestId,\n        request,\n        response,\n        isMockedResponse\n      });\n    };\n  }\n  setup() {\n    const { get: originalGet, request: originalRequest } = http__WEBPACK_IMPORTED_MODULE_2__;\n    const { get: originalHttpsGet, request: originalHttpsRequest } = https__WEBPACK_IMPORTED_MODULE_3__;\n    const onRequest = this.onRequest.bind(this);\n    const onResponse = this.onResponse.bind(this);\n    http__WEBPACK_IMPORTED_MODULE_2__.request = new Proxy(http__WEBPACK_IMPORTED_MODULE_2__.request, {\n      apply: (target, thisArg, args) => {\n        const [url, options, callback] = normalizeClientRequestArgs(\n          \"http:\",\n          args\n        );\n        const mockAgent = new MockAgent({\n          customAgent: options.agent,\n          onRequest,\n          onResponse\n        });\n        options.agent = mockAgent;\n        return Reflect.apply(target, thisArg, [url, options, callback]);\n      }\n    });\n    http__WEBPACK_IMPORTED_MODULE_2__.get = new Proxy(http__WEBPACK_IMPORTED_MODULE_2__.get, {\n      apply: (target, thisArg, args) => {\n        const [url, options, callback] = normalizeClientRequestArgs(\n          \"http:\",\n          args\n        );\n        const mockAgent = new MockAgent({\n          customAgent: options.agent,\n          onRequest,\n          onResponse\n        });\n        options.agent = mockAgent;\n        return Reflect.apply(target, thisArg, [url, options, callback]);\n      }\n    });\n    https__WEBPACK_IMPORTED_MODULE_3__.request = new Proxy(https__WEBPACK_IMPORTED_MODULE_3__.request, {\n      apply: (target, thisArg, args) => {\n        const [url, options, callback] = normalizeClientRequestArgs(\n          \"https:\",\n          args\n        );\n        const mockAgent = new MockHttpsAgent({\n          customAgent: options.agent,\n          onRequest,\n          onResponse\n        });\n        options.agent = mockAgent;\n        return Reflect.apply(target, thisArg, [url, options, callback]);\n      }\n    });\n    https__WEBPACK_IMPORTED_MODULE_3__.get = new Proxy(https__WEBPACK_IMPORTED_MODULE_3__.get, {\n      apply: (target, thisArg, args) => {\n        const [url, options, callback] = normalizeClientRequestArgs(\n          \"https:\",\n          args\n        );\n        const mockAgent = new MockHttpsAgent({\n          customAgent: options.agent,\n          onRequest,\n          onResponse\n        });\n        options.agent = mockAgent;\n        return Reflect.apply(target, thisArg, [url, options, callback]);\n      }\n    });\n    recordRawFetchHeaders();\n    this.subscriptions.push(() => {\n      http__WEBPACK_IMPORTED_MODULE_2__.get = originalGet;\n      http__WEBPACK_IMPORTED_MODULE_2__.request = originalRequest;\n      https__WEBPACK_IMPORTED_MODULE_3__.get = originalHttpsGet;\n      https__WEBPACK_IMPORTED_MODULE_3__.request = originalHttpsRequest;\n      restoreHeadersPrototype();\n    });\n  }\n};\nvar ClientRequestInterceptor = _ClientRequestInterceptor;\nClientRequestInterceptor.symbol = Symbol(\"client-request-interceptor\");\n\n\n//# sourceMappingURL=chunk-FWJSC2QD.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-FWJSC2QD.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchResponse: () => (/* binding */ FetchResponse),\n/* harmony export */   INTERNAL_REQUEST_ID_HEADER_NAME: () => (/* binding */ INTERNAL_REQUEST_ID_HEADER_NAME),\n/* harmony export */   Interceptor: () => (/* binding */ Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* binding */ InterceptorReadyState),\n/* harmony export */   createRequestId: () => (/* binding */ createRequestId),\n/* harmony export */   deleteGlobalSymbol: () => (/* binding */ deleteGlobalSymbol),\n/* harmony export */   getGlobalSymbol: () => (/* binding */ getGlobalSymbol)\n/* harmony export */ });\n/* harmony import */ var _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @open-draft/logger */ \"(rsc)/./node_modules/@open-draft/logger/lib/index.mjs\");\n/* harmony import */ var strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strict-event-emitter */ \"(rsc)/./node_modules/strict-event-emitter/lib/index.mjs\");\n// src/Interceptor.ts\n\n\nvar INTERNAL_REQUEST_ID_HEADER_NAME = \"x-interceptors-internal-request-id\";\nfunction getGlobalSymbol(symbol) {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || void 0\n  );\n}\nfunction setGlobalSymbol(symbol, value) {\n  globalThis[symbol] = value;\n}\nfunction deleteGlobalSymbol(symbol) {\n  delete globalThis[symbol];\n}\nvar InterceptorReadyState = /* @__PURE__ */ ((InterceptorReadyState2) => {\n  InterceptorReadyState2[\"INACTIVE\"] = \"INACTIVE\";\n  InterceptorReadyState2[\"APPLYING\"] = \"APPLYING\";\n  InterceptorReadyState2[\"APPLIED\"] = \"APPLIED\";\n  InterceptorReadyState2[\"DISPOSING\"] = \"DISPOSING\";\n  InterceptorReadyState2[\"DISPOSED\"] = \"DISPOSED\";\n  return InterceptorReadyState2;\n})(InterceptorReadyState || {});\nvar Interceptor = class {\n  constructor(symbol) {\n    this.symbol = symbol;\n    this.readyState = \"INACTIVE\" /* INACTIVE */;\n    this.emitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n    this.subscriptions = [];\n    this.logger = new _open_draft_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(symbol.description);\n    this.emitter.setMaxListeners(0);\n    this.logger.info(\"constructing the interceptor...\");\n  }\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  checkEnvironment() {\n    return true;\n  }\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  apply() {\n    const logger = this.logger.extend(\"apply\");\n    logger.info(\"applying the interceptor...\");\n    if (this.readyState === \"APPLIED\" /* APPLIED */) {\n      logger.info(\"intercepted already applied!\");\n      return;\n    }\n    const shouldApply = this.checkEnvironment();\n    if (!shouldApply) {\n      logger.info(\"the interceptor cannot be applied in this environment!\");\n      return;\n    }\n    this.readyState = \"APPLYING\" /* APPLYING */;\n    const runningInstance = this.getInstance();\n    if (runningInstance) {\n      logger.info(\"found a running instance, reusing...\");\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event);\n        runningInstance.emitter.addListener(event, listener);\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener);\n          logger.info('removed proxied \"%s\" listener!', event);\n        });\n        return this;\n      };\n      this.readyState = \"APPLIED\" /* APPLIED */;\n      return;\n    }\n    logger.info(\"no running instance found, setting up a new instance...\");\n    this.setup();\n    this.setInstance();\n    this.readyState = \"APPLIED\" /* APPLIED */;\n  }\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  setup() {\n  }\n  /**\n   * Listen to the interceptor's public events.\n   */\n  on(event, listener) {\n    const logger = this.logger.extend(\"on\");\n    if (this.readyState === \"DISPOSING\" /* DISPOSING */ || this.readyState === \"DISPOSED\" /* DISPOSED */) {\n      logger.info(\"cannot listen to events, already disposed!\");\n      return this;\n    }\n    logger.info('adding \"%s\" event listener:', event, listener);\n    this.emitter.on(event, listener);\n    return this;\n  }\n  once(event, listener) {\n    this.emitter.once(event, listener);\n    return this;\n  }\n  off(event, listener) {\n    this.emitter.off(event, listener);\n    return this;\n  }\n  removeAllListeners(event) {\n    this.emitter.removeAllListeners(event);\n    return this;\n  }\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  dispose() {\n    const logger = this.logger.extend(\"dispose\");\n    if (this.readyState === \"DISPOSED\" /* DISPOSED */) {\n      logger.info(\"cannot dispose, already disposed!\");\n      return;\n    }\n    logger.info(\"disposing the interceptor...\");\n    this.readyState = \"DISPOSING\" /* DISPOSING */;\n    if (!this.getInstance()) {\n      logger.info(\"no interceptors running, skipping dispose...\");\n      return;\n    }\n    this.clearInstance();\n    logger.info(\"global symbol deleted:\", getGlobalSymbol(this.symbol));\n    if (this.subscriptions.length > 0) {\n      logger.info(\"disposing of %d subscriptions...\", this.subscriptions.length);\n      for (const dispose of this.subscriptions) {\n        dispose();\n      }\n      this.subscriptions = [];\n      logger.info(\"disposed of all subscriptions!\", this.subscriptions.length);\n    }\n    this.emitter.removeAllListeners();\n    logger.info(\"destroyed the listener!\");\n    this.readyState = \"DISPOSED\" /* DISPOSED */;\n  }\n  getInstance() {\n    var _a;\n    const instance = getGlobalSymbol(this.symbol);\n    this.logger.info(\"retrieved global instance:\", (_a = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a.name);\n    return instance;\n  }\n  setInstance() {\n    setGlobalSymbol(this.symbol, this);\n    this.logger.info(\"set global instance!\", this.symbol.description);\n  }\n  clearInstance() {\n    deleteGlobalSymbol(this.symbol);\n    this.logger.info(\"cleared global instance!\", this.symbol.description);\n  }\n};\n\n// src/createRequestId.ts\nfunction createRequestId() {\n  return Math.random().toString(16).slice(2);\n}\n\n// src/utils/fetchUtils.ts\nvar _FetchResponse = class extends Response {\n  static isConfigurableStatusCode(status) {\n    return status >= 200 && status <= 599;\n  }\n  static isRedirectResponse(status) {\n    return _FetchResponse.STATUS_CODES_WITH_REDIRECT.includes(status);\n  }\n  /**\n   * Returns a boolean indicating whether the given response status\n   * code represents a response that can have a body.\n   */\n  static isResponseWithBody(status) {\n    return !_FetchResponse.STATUS_CODES_WITHOUT_BODY.includes(status);\n  }\n  static setUrl(url, response) {\n    if (!url) {\n      return;\n    }\n    if (response.url != \"\") {\n      return;\n    }\n    Object.defineProperty(response, \"url\", {\n      value: url,\n      enumerable: true,\n      configurable: true,\n      writable: false\n    });\n  }\n  /**\n   * Parses the given raw HTTP headers into a Fetch API `Headers` instance.\n   */\n  static parseRawHeaders(rawHeaders) {\n    const headers = new Headers();\n    for (let line = 0; line < rawHeaders.length; line += 2) {\n      headers.append(rawHeaders[line], rawHeaders[line + 1]);\n    }\n    return headers;\n  }\n  constructor(body, init = {}) {\n    var _a;\n    const status = (_a = init.status) != null ? _a : 200;\n    const safeStatus = _FetchResponse.isConfigurableStatusCode(status) ? status : 200;\n    const finalBody = _FetchResponse.isResponseWithBody(status) ? body : null;\n    super(finalBody, {\n      ...init,\n      status: safeStatus\n    });\n    if (status !== safeStatus) {\n      const stateSymbol = Object.getOwnPropertySymbols(this).find(\n        (symbol) => symbol.description === \"state\"\n      );\n      if (stateSymbol) {\n        const state = Reflect.get(this, stateSymbol);\n        Reflect.set(state, \"status\", status);\n      } else {\n        Object.defineProperty(this, \"status\", {\n          value: status,\n          enumerable: true,\n          configurable: true,\n          writable: false\n        });\n      }\n    }\n    _FetchResponse.setUrl(init.url, this);\n  }\n};\nvar FetchResponse = _FetchResponse;\n/**\n * Response status codes for responses that cannot have body.\n * @see https://fetch.spec.whatwg.org/#statuses\n */\nFetchResponse.STATUS_CODES_WITHOUT_BODY = [101, 103, 204, 205, 304];\nFetchResponse.STATUS_CODES_WITH_REDIRECT = [301, 302, 303, 307, 308];\n\n\n//# sourceMappingURL=chunk-I7HQIBT7.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-OMWE7UVM.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-OMWE7UVM.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLHttpRequestInterceptor: () => (/* binding */ XMLHttpRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-6HYIRFX2.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\");\n/* harmony import */ var _chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-TX5GBTFY.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs\");\n/* harmony import */ var _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-6YM4PLBI.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs\");\n/* harmony import */ var _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-5KMS5CTP.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! outvariant */ \"(rsc)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var is_node_process__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! is-node-process */ \"(rsc)/./node_modules/is-node-process/lib/index.mjs\");\n\n\n\n\n\n\n// src/interceptors/XMLHttpRequest/index.ts\n\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\n\n\n\n// src/interceptors/XMLHttpRequest/utils/concatArrayBuffer.ts\nfunction concatArrayBuffer(left, right) {\n  const result = new Uint8Array(left.byteLength + right.byteLength);\n  result.set(left, 0);\n  result.set(right, left.byteLength);\n  return result;\n}\n\n// src/interceptors/XMLHttpRequest/polyfills/EventPolyfill.ts\nvar EventPolyfill = class {\n  constructor(type, options) {\n    this.NONE = 0;\n    this.CAPTURING_PHASE = 1;\n    this.AT_TARGET = 2;\n    this.BUBBLING_PHASE = 3;\n    this.type = \"\";\n    this.srcElement = null;\n    this.currentTarget = null;\n    this.eventPhase = 0;\n    this.isTrusted = true;\n    this.composed = false;\n    this.cancelable = true;\n    this.defaultPrevented = false;\n    this.bubbles = true;\n    this.lengthComputable = true;\n    this.loaded = 0;\n    this.total = 0;\n    this.cancelBubble = false;\n    this.returnValue = true;\n    this.type = type;\n    this.target = (options == null ? void 0 : options.target) || null;\n    this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;\n    this.timeStamp = Date.now();\n  }\n  composedPath() {\n    return [];\n  }\n  initEvent(type, bubbles, cancelable) {\n    this.type = type;\n    this.bubbles = !!bubbles;\n    this.cancelable = !!cancelable;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n  stopPropagation() {\n  }\n  stopImmediatePropagation() {\n  }\n};\n\n// src/interceptors/XMLHttpRequest/polyfills/ProgressEventPolyfill.ts\nvar ProgressEventPolyfill = class extends EventPolyfill {\n  constructor(type, init) {\n    super(type);\n    this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;\n    this.composed = (init == null ? void 0 : init.composed) || false;\n    this.loaded = (init == null ? void 0 : init.loaded) || 0;\n    this.total = (init == null ? void 0 : init.total) || 0;\n  }\n};\n\n// src/interceptors/XMLHttpRequest/utils/createEvent.ts\nvar SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== \"undefined\";\nfunction createEvent(target, type, init) {\n  const progressEvents = [\n    \"error\",\n    \"progress\",\n    \"loadstart\",\n    \"loadend\",\n    \"load\",\n    \"timeout\",\n    \"abort\"\n  ];\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;\n  const event = progressEvents.includes(type) ? new ProgressEventClass(type, {\n    lengthComputable: true,\n    loaded: (init == null ? void 0 : init.loaded) || 0,\n    total: (init == null ? void 0 : init.total) || 0\n  }) : new EventPolyfill(type, {\n    target,\n    currentTarget: target\n  });\n  return event;\n}\n\n// src/utils/findPropertySource.ts\nfunction findPropertySource(target, propertyName) {\n  if (!(propertyName in target)) {\n    return null;\n  }\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);\n  if (hasProperty) {\n    return target;\n  }\n  const prototype = Reflect.getPrototypeOf(target);\n  return prototype ? findPropertySource(prototype, propertyName) : null;\n}\n\n// src/utils/createProxy.ts\nfunction createProxy(target, options) {\n  const proxy = new Proxy(target, optionsToProxyHandler(options));\n  return proxy;\n}\nfunction optionsToProxyHandler(options) {\n  const { constructorCall, methodCall, getProperty, setProperty } = options;\n  const handler = {};\n  if (typeof constructorCall !== \"undefined\") {\n    handler.construct = function(target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target, args, newTarget);\n      return constructorCall.call(newTarget, args, next);\n    };\n  }\n  handler.set = function(target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target;\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\n        propertySource,\n        propertyName\n      );\n      if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== \"undefined\") {\n        ownDescriptors.set.apply(target, [nextValue]);\n        return true;\n      }\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue\n      });\n    };\n    if (typeof setProperty !== \"undefined\") {\n      return setProperty.call(target, [propertyName, nextValue], next);\n    }\n    return next();\n  };\n  handler.get = function(target, propertyName, receiver) {\n    const next = () => target[propertyName];\n    const value = typeof getProperty !== \"undefined\" ? getProperty.call(target, [propertyName, receiver], next) : next();\n    if (typeof value === \"function\") {\n      return (...args) => {\n        const next2 = value.bind(target, ...args);\n        if (typeof methodCall !== \"undefined\") {\n          return methodCall.call(target, [propertyName, args], next2);\n        }\n        return next2();\n      };\n    }\n    return value;\n  };\n  return handler;\n}\n\n// src/interceptors/XMLHttpRequest/utils/isDomParserSupportedType.ts\nfunction isDomParserSupportedType(type) {\n  const supportedTypes = [\n    \"application/xhtml+xml\",\n    \"application/xml\",\n    \"image/svg+xml\",\n    \"text/html\",\n    \"text/xml\"\n  ];\n  return supportedTypes.some((supportedType) => {\n    return type.startsWith(supportedType);\n  });\n}\n\n// src/utils/parseJson.ts\nfunction parseJson(data) {\n  try {\n    const json = JSON.parse(data);\n    return json;\n  } catch (_) {\n    return null;\n  }\n}\n\n// src/interceptors/XMLHttpRequest/utils/createResponse.ts\nfunction createResponse(request, body) {\n  const responseBodyOrNull = _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__.FetchResponse.isResponseWithBody(request.status) ? body : null;\n  return new _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__.FetchResponse(responseBodyOrNull, {\n    url: request.responseURL,\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpReqestHeaders(\n      request.getAllResponseHeaders()\n    )\n  });\n}\nfunction createHeadersFromXMLHttpReqestHeaders(headersString) {\n  const headers = new Headers();\n  const lines = headersString.split(/[\\r\\n]+/);\n  for (const line of lines) {\n    if (line.trim() === \"\") {\n      continue;\n    }\n    const [name, ...parts] = line.split(\": \");\n    const value = parts.join(\": \");\n    headers.append(name, value);\n  }\n  return headers;\n}\n\n// src/interceptors/XMLHttpRequest/utils/getBodyByteLength.ts\nasync function getBodyByteLength(input) {\n  const explicitContentLength = input.headers.get(\"content-length\");\n  if (explicitContentLength != null && explicitContentLength !== \"\") {\n    return Number(explicitContentLength);\n  }\n  const buffer = await input.arrayBuffer();\n  return buffer.byteLength;\n}\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestController.ts\nvar kIsRequestHandled = Symbol(\"kIsRequestHandled\");\nvar IS_NODE = (0,is_node_process__WEBPACK_IMPORTED_MODULE_6__.isNodeProcess)();\nvar kFetchRequest = Symbol(\"kFetchRequest\");\nvar XMLHttpRequestController = class {\n  constructor(initialRequest, logger) {\n    this.initialRequest = initialRequest;\n    this.logger = logger;\n    this.method = \"GET\";\n    this.url = null;\n    this[kIsRequestHandled] = false;\n    this.events = /* @__PURE__ */ new Map();\n    this.uploadEvents = /* @__PURE__ */ new Map();\n    this.requestId = (0,_chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__.createRequestId)();\n    this.requestHeaders = new Headers();\n    this.responseBuffer = new Uint8Array();\n    this.request = createProxy(initialRequest, {\n      setProperty: ([propertyName, nextValue], invoke) => {\n        switch (propertyName) {\n          case \"ontimeout\": {\n            const eventName = propertyName.slice(\n              2\n            );\n            this.request.addEventListener(eventName, nextValue);\n            return invoke();\n          }\n          default: {\n            return invoke();\n          }\n        }\n      },\n      methodCall: ([methodName, args], invoke) => {\n        var _a;\n        switch (methodName) {\n          case \"open\": {\n            const [method, url] = args;\n            if (typeof url === \"undefined\") {\n              this.method = \"GET\";\n              this.url = toAbsoluteUrl(method);\n            } else {\n              this.method = method;\n              this.url = toAbsoluteUrl(url);\n            }\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`);\n            this.logger.info(\"open\", this.method, this.url.href);\n            return invoke();\n          }\n          case \"addEventListener\": {\n            const [eventName, listener] = args;\n            this.registerEvent(eventName, listener);\n            this.logger.info(\"addEventListener\", eventName, listener);\n            return invoke();\n          }\n          case \"setRequestHeader\": {\n            const [name, value] = args;\n            this.requestHeaders.set(name, value);\n            this.logger.info(\"setRequestHeader\", name, value);\n            return invoke();\n          }\n          case \"send\": {\n            const [body] = args;\n            this.request.addEventListener(\"load\", () => {\n              if (typeof this.onResponse !== \"undefined\") {\n                const fetchResponse = createResponse(\n                  this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response\n                );\n                this.onResponse.call(this, {\n                  response: fetchResponse,\n                  isMockedResponse: this[kIsRequestHandled],\n                  request: fetchRequest,\n                  requestId: this.requestId\n                });\n              }\n            });\n            const requestBody = typeof body === \"string\" ? (0,_chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__.encodeBuffer)(body) : body;\n            const fetchRequest = this.toFetchApiRequest(requestBody);\n            this[kFetchRequest] = fetchRequest.clone();\n            const onceRequestSettled = ((_a = this.onRequest) == null ? void 0 : _a.call(this, {\n              request: fetchRequest,\n              requestId: this.requestId\n            })) || Promise.resolve();\n            onceRequestSettled.finally(() => {\n              if (!this[kIsRequestHandled]) {\n                this.logger.info(\n                  \"request callback settled but request has not been handled (readystate %d), performing as-is...\",\n                  this.request.readyState\n                );\n                if (IS_NODE) {\n                  this.request.setRequestHeader(\n                    _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__.INTERNAL_REQUEST_ID_HEADER_NAME,\n                    this.requestId\n                  );\n                }\n                return invoke();\n              }\n            });\n            break;\n          }\n          default: {\n            return invoke();\n          }\n        }\n      }\n    });\n    define(\n      this.request,\n      \"upload\",\n      createProxy(this.request.upload, {\n        setProperty: ([propertyName, nextValue], invoke) => {\n          switch (propertyName) {\n            case \"onloadstart\":\n            case \"onprogress\":\n            case \"onaboart\":\n            case \"onerror\":\n            case \"onload\":\n            case \"ontimeout\":\n            case \"onloadend\": {\n              const eventName = propertyName.slice(\n                2\n              );\n              this.registerUploadEvent(eventName, nextValue);\n            }\n          }\n          return invoke();\n        },\n        methodCall: ([methodName, args], invoke) => {\n          switch (methodName) {\n            case \"addEventListener\": {\n              const [eventName, listener] = args;\n              this.registerUploadEvent(eventName, listener);\n              this.logger.info(\"upload.addEventListener\", eventName, listener);\n              return invoke();\n            }\n          }\n        }\n      })\n    );\n  }\n  registerEvent(eventName, listener) {\n    const prevEvents = this.events.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.events.set(eventName, nextEvents);\n    this.logger.info('registered event \"%s\"', eventName, listener);\n  }\n  registerUploadEvent(eventName, listener) {\n    const prevEvents = this.uploadEvents.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.uploadEvents.set(eventName, nextEvents);\n    this.logger.info('registered upload event \"%s\"', eventName, listener);\n  }\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  async respondWith(response) {\n    this[kIsRequestHandled] = true;\n    if (this[kFetchRequest]) {\n      const totalRequestBodyLength = await getBodyByteLength(\n        this[kFetchRequest]\n      );\n      this.trigger(\"loadstart\", this.request.upload, {\n        loaded: 0,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"progress\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"load\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"loadend\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n    }\n    this.logger.info(\n      \"responding with a mocked response: %d %s\",\n      response.status,\n      response.statusText\n    );\n    define(this.request, \"status\", response.status);\n    define(this.request, \"statusText\", response.statusText);\n    define(this.request, \"responseURL\", this.url.href);\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args) => {\n        this.logger.info(\"getResponseHeader\", args[0]);\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info(\"headers not received yet, returning null\");\n          return null;\n        }\n        const headerValue = response.headers.get(args[0]);\n        this.logger.info(\n          'resolved response header \"%s\" to',\n          args[0],\n          headerValue\n        );\n        return headerValue;\n      }\n    });\n    this.request.getAllResponseHeaders = new Proxy(\n      this.request.getAllResponseHeaders,\n      {\n        apply: () => {\n          this.logger.info(\"getAllResponseHeaders\");\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n            this.logger.info(\"headers not received yet, returning empty string\");\n            return \"\";\n          }\n          const headersList = Array.from(response.headers.entries());\n          const allHeaders = headersList.map(([headerName, headerValue]) => {\n            return `${headerName}: ${headerValue}`;\n          }).join(\"\\r\\n\");\n          this.logger.info(\"resolved all response headers to\", allHeaders);\n          return allHeaders;\n        }\n      }\n    );\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML\n      }\n    });\n    const totalResponseBodyLength = await getBodyByteLength(response.clone());\n    this.logger.info(\"calculated response body length\", totalResponseBodyLength);\n    this.trigger(\"loadstart\", this.request, {\n      loaded: 0,\n      total: totalResponseBodyLength\n    });\n    this.setReadyState(this.request.HEADERS_RECEIVED);\n    this.setReadyState(this.request.LOADING);\n    const finalizeResponse = () => {\n      this.logger.info(\"finalizing the mocked response...\");\n      this.setReadyState(this.request.DONE);\n      this.trigger(\"load\", this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n      this.trigger(\"loadend\", this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n    };\n    if (response.body) {\n      this.logger.info(\"mocked response has body, streaming...\");\n      const reader = response.body.getReader();\n      const readNextResponseBodyChunk = async () => {\n        const { value, done } = await reader.read();\n        if (done) {\n          this.logger.info(\"response body stream done!\");\n          finalizeResponse();\n          return;\n        }\n        if (value) {\n          this.logger.info(\"read response body chunk:\", value);\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);\n          this.trigger(\"progress\", this.request, {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength\n          });\n        }\n        readNextResponseBodyChunk();\n      };\n      readNextResponseBodyChunk();\n    } else {\n      finalizeResponse();\n    }\n  }\n  responseBufferToText() {\n    return (0,_chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__.decodeBuffer)(this.responseBuffer);\n  }\n  get response() {\n    this.logger.info(\n      \"getResponse (responseType: %s)\",\n      this.request.responseType\n    );\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    switch (this.request.responseType) {\n      case \"json\": {\n        const responseJson = parseJson(this.responseBufferToText());\n        this.logger.info(\"resolved response JSON\", responseJson);\n        return responseJson;\n      }\n      case \"arraybuffer\": {\n        const arrayBuffer = (0,_chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_0__.toArrayBuffer)(this.responseBuffer);\n        this.logger.info(\"resolved response ArrayBuffer\", arrayBuffer);\n        return arrayBuffer;\n      }\n      case \"blob\": {\n        const mimeType = this.request.getResponseHeader(\"Content-Type\") || \"text/plain\";\n        const responseBlob = new Blob([this.responseBufferToText()], {\n          type: mimeType\n        });\n        this.logger.info(\n          \"resolved response Blob (mime type: %s)\",\n          responseBlob,\n          mimeType\n        );\n        return responseBlob;\n      }\n      default: {\n        const responseText = this.responseBufferToText();\n        this.logger.info(\n          'resolving \"%s\" response type as text',\n          this.request.responseType,\n          responseText\n        );\n        return responseText;\n      }\n    }\n  }\n  get responseText() {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(\n      this.request.responseType === \"\" || this.request.responseType === \"text\",\n      \"InvalidStateError: The object is in invalid state.\"\n    );\n    if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {\n      return \"\";\n    }\n    const responseText = this.responseBufferToText();\n    this.logger.info('getResponseText: \"%s\"', responseText);\n    return responseText;\n  }\n  get responseXML() {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(\n      this.request.responseType === \"\" || this.request.responseType === \"document\",\n      \"InvalidStateError: The object is in invalid state.\"\n    );\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    const contentType = this.request.getResponseHeader(\"Content-Type\") || \"\";\n    if (typeof DOMParser === \"undefined\") {\n      console.warn(\n        \"Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.\"\n      );\n      return null;\n    }\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(\n        this.responseBufferToText(),\n        contentType\n      );\n    }\n    return null;\n  }\n  errorWith(error) {\n    this[kIsRequestHandled] = true;\n    this.logger.info(\"responding with an error\");\n    this.setReadyState(this.request.DONE);\n    this.trigger(\"error\", this.request);\n    this.trigger(\"loadend\", this.request);\n  }\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  setReadyState(nextReadyState) {\n    this.logger.info(\n      \"setReadyState: %d -> %d\",\n      this.request.readyState,\n      nextReadyState\n    );\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info(\"ready state identical, skipping transition...\");\n      return;\n    }\n    define(this.request, \"readyState\", nextReadyState);\n    this.logger.info(\"set readyState to: %d\", nextReadyState);\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggerring \"readystatechange\" event...');\n      this.trigger(\"readystatechange\", this.request);\n    }\n  }\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  trigger(eventName, target, options) {\n    const callback = target[`on${eventName}`];\n    const event = createEvent(target, eventName, options);\n    this.logger.info('trigger \"%s\"', eventName, options || \"\");\n    if (typeof callback === \"function\") {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName);\n      callback.call(target, event);\n    }\n    const events = target instanceof XMLHttpRequestUpload ? this.uploadEvents : this.events;\n    for (const [registeredEventName, listeners] of events) {\n      if (registeredEventName === eventName) {\n        this.logger.info(\n          'found %d listener(s) for \"%s\" event, calling...',\n          listeners.length,\n          eventName\n        );\n        listeners.forEach((listener) => listener.call(target, event));\n      }\n    }\n  }\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  toFetchApiRequest(body) {\n    this.logger.info(\"converting request to a Fetch API Request...\");\n    const resolvedBody = body instanceof Document ? body.documentElement.innerText : body;\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? \"include\" : \"same-origin\",\n      body: [\"GET\", \"HEAD\"].includes(this.method.toUpperCase()) ? null : resolvedBody\n    });\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: ([methodName, args], invoke) => {\n        switch (methodName) {\n          case \"append\":\n          case \"set\": {\n            const [headerName, headerValue] = args;\n            this.request.setRequestHeader(headerName, headerValue);\n            break;\n          }\n          case \"delete\": {\n            const [headerName] = args;\n            console.warn(\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\n            );\n            break;\n          }\n        }\n        return invoke();\n      }\n    });\n    define(fetchRequest, \"headers\", proxyHeaders);\n    this.logger.info(\"converted request to a Fetch API Request!\", fetchRequest);\n    return fetchRequest;\n  }\n};\nkIsRequestHandled, kFetchRequest;\nfunction toAbsoluteUrl(url) {\n  if (typeof location === \"undefined\") {\n    return new URL(url);\n  }\n  return new URL(url.toString(), location.href);\n}\nfunction define(target, property, value) {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value\n  });\n}\n\n// src/interceptors/XMLHttpRequest/XMLHttpRequestProxy.ts\nfunction createXMLHttpRequestProxy({\n  emitter,\n  logger\n}) {\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info(\"constructed new XMLHttpRequest\");\n      const originalRequest = Reflect.construct(\n        target,\n        args,\n        newTarget\n      );\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\n        target.prototype\n      );\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(\n          originalRequest,\n          propertyName,\n          prototypeDescriptors[propertyName]\n        );\n      }\n      const xhrRequestController = new XMLHttpRequestController(\n        originalRequest,\n        logger\n      );\n      xhrRequestController.onRequest = async function({ request, requestId }) {\n        const controller = new _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestController(request);\n        this.logger.info(\"awaiting mocked response...\");\n        this.logger.info(\n          'emitting the \"request\" event for %s listener(s)...',\n          emitter.listenerCount(\"request\")\n        );\n        const isRequestHandled = await (0,_chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_3__.handleRequest)({\n          request,\n          requestId,\n          controller,\n          emitter,\n          onResponse: async (response) => {\n            await this.respondWith(response);\n          },\n          onRequestError: () => {\n            this.errorWith(new TypeError(\"Network error\"));\n          },\n          onError: (error) => {\n            this.logger.info(\"request errored!\", { error });\n            if (error instanceof Error) {\n              this.errorWith(error);\n            }\n          }\n        });\n        if (!isRequestHandled) {\n          this.logger.info(\n            \"no mocked response received, performing request as-is...\"\n          );\n        }\n      };\n      xhrRequestController.onResponse = async function({\n        response,\n        isMockedResponse,\n        request,\n        requestId\n      }) {\n        this.logger.info(\n          'emitting the \"response\" event for %s listener(s)...',\n          emitter.listenerCount(\"response\")\n        );\n        emitter.emit(\"response\", {\n          response,\n          isMockedResponse,\n          request,\n          requestId\n        });\n      };\n      return xhrRequestController.request;\n    }\n  });\n  return XMLHttpRequestProxy;\n}\n\n// src/interceptors/XMLHttpRequest/index.ts\nvar _XMLHttpRequestInterceptor = class extends _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__.Interceptor {\n  constructor() {\n    super(_XMLHttpRequestInterceptor.interceptorSymbol);\n  }\n  checkEnvironment() {\n    return (0,_chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_1__.hasConfigurableGlobal)(\"XMLHttpRequest\");\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info('patching \"XMLHttpRequest\" module...');\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest;\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_5__.invariant)(\n      !PureXMLHttpRequest[_chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE],\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\n    );\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger\n    });\n    logger.info(\n      'native \"XMLHttpRequest\" module patched!',\n      globalThis.XMLHttpRequest.name\n    );\n    Object.defineProperty(globalThis.XMLHttpRequest, _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.XMLHttpRequest = PureXMLHttpRequest;\n      logger.info(\n        'native \"XMLHttpRequest\" module restored!',\n        globalThis.XMLHttpRequest.name\n      );\n    });\n  }\n};\nvar XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;\nXMLHttpRequestInterceptor.interceptorSymbol = Symbol(\"xhr\");\n\n\n//# sourceMappingURL=chunk-OMWE7UVM.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-OMWE7UVM.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-PJA4E426.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-PJA4E426.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchInterceptor: () => (/* binding */ BatchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n\n\n// src/BatchInterceptor.ts\nvar BatchInterceptor = class extends _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_0__.Interceptor {\n  constructor(options) {\n    BatchInterceptor.symbol = Symbol(options.name);\n    super(BatchInterceptor.symbol);\n    this.interceptors = options.interceptors;\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info(\"applying all %d interceptors...\", this.interceptors.length);\n    for (const interceptor of this.interceptors) {\n      logger.info('applying \"%s\" interceptor...', interceptor.constructor.name);\n      interceptor.apply();\n      logger.info(\"adding interceptor dispose subscription\");\n      this.subscriptions.push(() => interceptor.dispose());\n    }\n  }\n  on(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.on(event, listener);\n    }\n    return this;\n  }\n  once(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.once(event, listener);\n    }\n    return this;\n  }\n  off(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.off(event, listener);\n    }\n    return this;\n  }\n  removeAllListeners(event) {\n    for (const interceptors of this.interceptors) {\n      interceptors.removeAllListeners(event);\n    }\n    return this;\n  }\n};\n\n\n//# sourceMappingURL=chunk-PJA4E426.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1QSkE0RTQyNi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFOEI7O0FBRTlCO0FBQ0EscUNBQXFDLDREQUFXO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2NodW5rLVBKQTRFNDI2Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbnRlcmNlcHRvclxufSBmcm9tIFwiLi9jaHVuay1JN0hRSUJUNy5tanNcIjtcblxuLy8gc3JjL0JhdGNoSW50ZXJjZXB0b3IudHNcbnZhciBCYXRjaEludGVyY2VwdG9yID0gY2xhc3MgZXh0ZW5kcyBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBCYXRjaEludGVyY2VwdG9yLnN5bWJvbCA9IFN5bWJvbChvcHRpb25zLm5hbWUpO1xuICAgIHN1cGVyKEJhdGNoSW50ZXJjZXB0b3Iuc3ltYm9sKTtcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IG9wdGlvbnMuaW50ZXJjZXB0b3JzO1xuICB9XG4gIHNldHVwKCkge1xuICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLmV4dGVuZChcInNldHVwXCIpO1xuICAgIGxvZ2dlci5pbmZvKFwiYXBwbHlpbmcgYWxsICVkIGludGVyY2VwdG9ycy4uLlwiLCB0aGlzLmludGVyY2VwdG9ycy5sZW5ndGgpO1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGxvZ2dlci5pbmZvKCdhcHBseWluZyBcIiVzXCIgaW50ZXJjZXB0b3IuLi4nLCBpbnRlcmNlcHRvci5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgIGludGVyY2VwdG9yLmFwcGx5KCk7XG4gICAgICBsb2dnZXIuaW5mbyhcImFkZGluZyBpbnRlcmNlcHRvciBkaXNwb3NlIHN1YnNjcmlwdGlvblwiKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKCgpID0+IGludGVyY2VwdG9yLmRpc3Bvc2UoKSk7XG4gICAgfVxuICB9XG4gIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgIGludGVyY2VwdG9yLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgZm9yIChjb25zdCBpbnRlcmNlcHRvciBvZiB0aGlzLmludGVyY2VwdG9ycykge1xuICAgICAgaW50ZXJjZXB0b3Iub25jZShldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgZm9yIChjb25zdCBpbnRlcmNlcHRvciBvZiB0aGlzLmludGVyY2VwdG9ycykge1xuICAgICAgaW50ZXJjZXB0b3Iub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICAgIGZvciAoY29uc3QgaW50ZXJjZXB0b3JzIG9mIHRoaXMuaW50ZXJjZXB0b3JzKSB7XG4gICAgICBpbnRlcmNlcHRvcnMucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIEJhdGNoSW50ZXJjZXB0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1QSkE0RTQyNi5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-PJA4E426.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasConfigurableGlobal: () => (/* binding */ hasConfigurableGlobal)\n/* harmony export */ });\n// src/utils/hasConfigurableGlobal.ts\nfunction hasConfigurableGlobal(propertyName) {\n  const descriptor = Object.getOwnPropertyDescriptor(globalThis, propertyName);\n  if (typeof descriptor === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"function\" && typeof descriptor.get() === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"undefined\" && descriptor.value == null) {\n    return false;\n  }\n  if (typeof descriptor.set === \"undefined\" && !descriptor.configurable) {\n    console.error(\n      `[MSW] Failed to apply interceptor: the global \\`${propertyName}\\` property is non-configurable. This is likely an issue with your environment. If you are using a framework, please open an issue about this in their repository.`\n    );\n    return false;\n  }\n  return true;\n}\n\n\n//# sourceMappingURL=chunk-TX5GBTFY.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9jaHVuay1UWDVHQlRGWS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsYUFBYTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2NodW5rLVRYNUdCVEZZLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvaGFzQ29uZmlndXJhYmxlR2xvYmFsLnRzXG5mdW5jdGlvbiBoYXNDb25maWd1cmFibGVHbG9iYWwocHJvcGVydHlOYW1lKSB7XG4gIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbFRoaXMsIHByb3BlcnR5TmFtZSk7XG4gIGlmICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlc2NyaXB0b3IuZ2V0KCkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gXCJ1bmRlZmluZWRcIiAmJiBkZXNjcmlwdG9yLnZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnNldCA9PT0gXCJ1bmRlZmluZWRcIiAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgYFtNU1ddIEZhaWxlZCB0byBhcHBseSBpbnRlcmNlcHRvcjogdGhlIGdsb2JhbCBcXGAke3Byb3BlcnR5TmFtZX1cXGAgcHJvcGVydHkgaXMgbm9uLWNvbmZpZ3VyYWJsZS4gVGhpcyBpcyBsaWtlbHkgYW4gaXNzdWUgd2l0aCB5b3VyIGVudmlyb25tZW50LiBJZiB5b3UgYXJlIHVzaW5nIGEgZnJhbWV3b3JrLCBwbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhYm91dCB0aGlzIGluIHRoZWlyIHJlcG9zaXRvcnkuYFxuICAgICk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQge1xuICBoYXNDb25maWd1cmFibGVHbG9iYWxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1UWDVHQlRGWS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchInterceptor: () => (/* reexport safe */ _chunk_PJA4E426_mjs__WEBPACK_IMPORTED_MODULE_0__.BatchInterceptor),\n/* harmony export */   FetchResponse: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.FetchResponse),\n/* harmony export */   INTERNAL_REQUEST_ID_HEADER_NAME: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.INTERNAL_REQUEST_ID_HEADER_NAME),\n/* harmony export */   IS_PATCHED_MODULE: () => (/* reexport safe */ _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__.IS_PATCHED_MODULE),\n/* harmony export */   Interceptor: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.Interceptor),\n/* harmony export */   InterceptorReadyState: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.InterceptorReadyState),\n/* harmony export */   createRequestId: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.createRequestId),\n/* harmony export */   decodeBuffer: () => (/* reexport safe */ _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeBuffer),\n/* harmony export */   deleteGlobalSymbol: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.deleteGlobalSymbol),\n/* harmony export */   encodeBuffer: () => (/* reexport safe */ _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeBuffer),\n/* harmony export */   getCleanUrl: () => (/* binding */ getCleanUrl),\n/* harmony export */   getGlobalSymbol: () => (/* reexport safe */ _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__.getGlobalSymbol)\n/* harmony export */ });\n/* harmony import */ var _chunk_PJA4E426_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-PJA4E426.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-PJA4E426.mjs\");\n/* harmony import */ var _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-6HYIRFX2.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\");\n/* harmony import */ var _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-6YM4PLBI.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n\n\n\n\n\n// src/utils/getCleanUrl.ts\nfunction getCleanUrl(url, isAbsolute = true) {\n  return [isAbsolute && url.origin, url.pathname].filter(Boolean).join(\"\");\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUU4QjtBQUlBO0FBR0E7QUFTQTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFjRTtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9yaWt1c2VuL3dvcmtzcGFjZS9uZXh0anMtbXN3LXJlcHJvZHVjdGlvbi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQmF0Y2hJbnRlcmNlcHRvclxufSBmcm9tIFwiLi9jaHVuay1QSkE0RTQyNi5tanNcIjtcbmltcG9ydCB7XG4gIGRlY29kZUJ1ZmZlcixcbiAgZW5jb2RlQnVmZmVyXG59IGZyb20gXCIuL2NodW5rLTZIWUlSRlgyLm1qc1wiO1xuaW1wb3J0IHtcbiAgSVNfUEFUQ0hFRF9NT0RVTEVcbn0gZnJvbSBcIi4vY2h1bmstNllNNFBMQkkubWpzXCI7XG5pbXBvcnQge1xuICBGZXRjaFJlc3BvbnNlLFxuICBJTlRFUk5BTF9SRVFVRVNUX0lEX0hFQURFUl9OQU1FLFxuICBJbnRlcmNlcHRvcixcbiAgSW50ZXJjZXB0b3JSZWFkeVN0YXRlLFxuICBjcmVhdGVSZXF1ZXN0SWQsXG4gIGRlbGV0ZUdsb2JhbFN5bWJvbCxcbiAgZ2V0R2xvYmFsU3ltYm9sXG59IGZyb20gXCIuL2NodW5rLUk3SFFJQlQ3Lm1qc1wiO1xuXG4vLyBzcmMvdXRpbHMvZ2V0Q2xlYW5VcmwudHNcbmZ1bmN0aW9uIGdldENsZWFuVXJsKHVybCwgaXNBYnNvbHV0ZSA9IHRydWUpIHtcbiAgcmV0dXJuIFtpc0Fic29sdXRlICYmIHVybC5vcmlnaW4sIHVybC5wYXRobmFtZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcIik7XG59XG5leHBvcnQge1xuICBCYXRjaEludGVyY2VwdG9yLFxuICBGZXRjaFJlc3BvbnNlLFxuICBJTlRFUk5BTF9SRVFVRVNUX0lEX0hFQURFUl9OQU1FLFxuICBJU19QQVRDSEVEX01PRFVMRSxcbiAgSW50ZXJjZXB0b3IsXG4gIEludGVyY2VwdG9yUmVhZHlTdGF0ZSxcbiAgY3JlYXRlUmVxdWVzdElkLFxuICBkZWNvZGVCdWZmZXIsXG4gIGRlbGV0ZUdsb2JhbFN5bWJvbCxcbiAgZW5jb2RlQnVmZmVyLFxuICBnZXRDbGVhblVybCxcbiAgZ2V0R2xvYmFsU3ltYm9sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientRequestInterceptor: () => (/* reexport safe */ _chunk_FWJSC2QD_mjs__WEBPACK_IMPORTED_MODULE_0__.ClientRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_FWJSC2QD_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-FWJSC2QD.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-FWJSC2QD.mjs\");\n/* harmony import */ var _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-5KMS5CTP.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvQ2xpZW50UmVxdWVzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVrQztBQUNBO0FBQ0E7QUFHaEM7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcmlrdXNlbi93b3Jrc3BhY2UvbmV4dGpzLW1zdy1yZXByb2R1Y3Rpb24vbm9kZV9tb2R1bGVzL0Btc3dqcy9pbnRlcmNlcHRvcnMvbGliL25vZGUvaW50ZXJjZXB0b3JzL0NsaWVudFJlcXVlc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENsaWVudFJlcXVlc3RJbnRlcmNlcHRvclxufSBmcm9tIFwiLi4vLi4vY2h1bmstRldKU0MyUUQubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay01S01TNUNUUC5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLUk3SFFJQlQ3Lm1qc1wiO1xuZXhwb3J0IHtcbiAgQ2xpZW50UmVxdWVzdEludGVyY2VwdG9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/ClientRequest/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLHttpRequestInterceptor: () => (/* reexport safe */ _chunk_OMWE7UVM_mjs__WEBPACK_IMPORTED_MODULE_0__.XMLHttpRequestInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_OMWE7UVM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-OMWE7UVM.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-OMWE7UVM.mjs\");\n/* harmony import */ var _chunk_6HYIRFX2_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-6HYIRFX2.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6HYIRFX2.mjs\");\n/* harmony import */ var _chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-TX5GBTFY.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs\");\n/* harmony import */ var _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-6YM4PLBI.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs\");\n/* harmony import */ var _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chunk-5KMS5CTP.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvWE1MSHR0cFJlcXVlc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFa0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2hDO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2ludGVyY2VwdG9ycy9YTUxIdHRwUmVxdWVzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgWE1MSHR0cFJlcXVlc3RJbnRlcmNlcHRvclxufSBmcm9tIFwiLi4vLi4vY2h1bmstT01XRTdVVk0ubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay02SFlJUkZYMi5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLVRYNUdCVEZZLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstNllNNFBMQkkubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay01S01TNUNUUC5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLUk3SFFJQlQ3Lm1qc1wiO1xuZXhwb3J0IHtcbiAgWE1MSHR0cFJlcXVlc3RJbnRlcmNlcHRvclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/XMLHttpRequest/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchInterceptor: () => (/* reexport safe */ _chunk_CTGTMEFD_mjs__WEBPACK_IMPORTED_MODULE_0__.FetchInterceptor)\n/* harmony export */ });\n/* harmony import */ var _chunk_CTGTMEFD_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chunk-CTGTMEFD.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-CTGTMEFD.mjs\");\n/* harmony import */ var _chunk_TX5GBTFY_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chunk-TX5GBTFY.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-TX5GBTFY.mjs\");\n/* harmony import */ var _chunk_6YM4PLBI_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chunk-6YM4PLBI.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-6YM4PLBI.mjs\");\n/* harmony import */ var _chunk_5KMS5CTP_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chunk-5KMS5CTP.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-5KMS5CTP.mjs\");\n/* harmony import */ var _chunk_I7HQIBT7_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chunk-I7HQIBT7.mjs */ \"(rsc)/./node_modules/@mswjs/interceptors/lib/node/chunk-I7HQIBT7.mjs\");\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1zd2pzL2ludGVyY2VwdG9ycy9saWIvbm9kZS9pbnRlcmNlcHRvcnMvZmV0Y2gvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVrQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2hDO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3Jpa3VzZW4vd29ya3NwYWNlL25leHRqcy1tc3ctcmVwcm9kdWN0aW9uL25vZGVfbW9kdWxlcy9AbXN3anMvaW50ZXJjZXB0b3JzL2xpYi9ub2RlL2ludGVyY2VwdG9ycy9mZXRjaC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRmV0Y2hJbnRlcmNlcHRvclxufSBmcm9tIFwiLi4vLi4vY2h1bmstQ1RHVE1FRkQubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1UWDVHQlRGWS5tanNcIjtcbmltcG9ydCBcIi4uLy4uL2NodW5rLTZZTTRQTEJJLm1qc1wiO1xuaW1wb3J0IFwiLi4vLi4vY2h1bmstNUtNUzVDVFAubWpzXCI7XG5pbXBvcnQgXCIuLi8uLi9jaHVuay1JN0hRSUJUNy5tanNcIjtcbmV4cG9ydCB7XG4gIEZldGNoSW50ZXJjZXB0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mswjs/interceptors/lib/node/interceptors/fetch/index.mjs\n");

/***/ })

};
;